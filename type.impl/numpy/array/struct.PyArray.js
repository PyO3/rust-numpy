(function() {
    var type_impls = Object.fromEntries([["numpy",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PyArray%3CPy%3CPyAny%3E,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#443-492\">Source</a><a href=\"#impl-PyArray%3CPy%3CPyAny%3E,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;D: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/dimension/dimension_trait/trait.Dimension.html\" title=\"trait ndarray::dimension::dimension_trait::Dimension\">Dimension</a>&gt; <a class=\"struct\" href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\">PyArray</a>&lt;PyObject, D&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_owned_object_array\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#479-491\">Source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.from_owned_object_array\" class=\"fn\">from_owned_object_array</a>&lt;T&gt;(\n    py: Python&lt;'_&gt;,\n    arr: <a class=\"type\" href=\"https://docs.rs/ndarray/0.15/ndarray/type.Array.html\" title=\"type ndarray::Array\">Array</a>&lt;Py&lt;T&gt;, D&gt;,\n) -&gt; Bound&lt;'_, Self&gt;</h4></section></summary><div class=\"docblock\"><p>Construct a NumPy array containing objects stored in a <a href=\"https://docs.rs/ndarray/0.15/ndarray/type.Array.html\" title=\"type ndarray::Array\"><code>ndarray::Array</code></a></p>\n<p>This method uses the internal <a href=\"https://doc.rust-lang.org/1.86.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> of the <a href=\"https://docs.rs/ndarray/0.15/ndarray/type.Array.html\" title=\"type ndarray::Array\"><code>ndarray::Array</code></a> as the base object of the NumPy array.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::array;\n<span class=\"kw\">use </span>pyo3::{pyclass, Py, Python, types::PyAnyMethods};\n<span class=\"kw\">use </span>numpy::{PyArray, PyArrayMethods};\n\n<span class=\"attr\">#[pyclass]\n</span><span class=\"kw\">struct </span>CustomElement {\n    foo: i32,\n    bar: f64,\n}\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>array = <span class=\"macro\">array!</span>[\n        Py::new(py, CustomElement {\n            foo: <span class=\"number\">1</span>,\n            bar: <span class=\"number\">2.0</span>,\n        }).unwrap(),\n        Py::new(py, CustomElement {\n            foo: <span class=\"number\">3</span>,\n            bar: <span class=\"number\">4.0</span>,\n        }).unwrap(),\n    ];\n\n    <span class=\"kw\">let </span>pyarray = PyArray::from_owned_object_array(py, array);\n\n    <span class=\"macro\">assert!</span>(pyarray.readonly().as_array().get(<span class=\"number\">0</span>).unwrap().bind(py).is_instance_of::&lt;CustomElement&gt;());\n});</code></pre></div>\n</div></details></div></details>",0,"numpy::array::PyArray0","numpy::array::PyArray1","numpy::array::PyArray2","numpy::array::PyArray3","numpy::array::PyArray4","numpy::array::PyArray5","numpy::array::PyArray6","numpy::array::PyArrayDyn"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PyArray%3CT,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#139-441\">Source</a><a href=\"#impl-PyArray%3CT,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"numpy/trait.Element.html\" title=\"trait numpy::Element\">Element</a>, D: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/dimension/dimension_trait/trait.Dimension.html\" title=\"trait ndarray::dimension::dimension_trait::Dimension\">Dimension</a>&gt; <a class=\"struct\" href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\">PyArray</a>&lt;T, D&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#211-217\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"numpy/array/struct.PyArray.html#tymethod.new\" class=\"fn\">new</a>&lt;'py, ID&gt;(\n    py: Python&lt;'py&gt;,\n    dims: ID,\n    is_fortran: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a>,\n) -&gt; Bound&lt;'py, Self&gt;<div class=\"where\">where\n    ID: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/dimension/conversion/trait.IntoDimension.html\" title=\"trait ndarray::dimension::conversion::IntoDimension\">IntoDimension</a>&lt;Dim = D&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates a new uninitialized NumPy array.</p>\n<p>If <code>is_fortran</code> is true, then it has Fortran/column-major order,\notherwise it has C/row-major order.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>The returned array will always be safe to be dropped as the elements must either\nbe trivially copyable (as indicated by <code>&lt;T as Element&gt;::IS_COPY</code>) or be pointers\ninto Python’s heap, which NumPy will automatically zero-initialize.</p>\n<p>However, the elements themselves will not be valid and should be initialized manually\nusing raw pointers obtained via [<code>uget_raw</code>][Self::uget_raw]. Before that, all methods\nwhich produce references to the elements invoke undefined behaviour. In particular,\nzero-initialized pointers are <em>not</em> valid instances of <code>PyObject</code>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>numpy::prelude::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>numpy::PyArray3;\n<span class=\"kw\">use </span>pyo3::Python;\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>arr = <span class=\"kw\">unsafe </span>{\n        <span class=\"kw\">let </span>arr = PyArray3::&lt;i32&gt;::new(py, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], <span class=\"bool-val\">false</span>);\n\n        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">4 </span>{\n            <span class=\"kw\">for </span>j <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">5 </span>{\n                <span class=\"kw\">for </span>k <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">6 </span>{\n                    arr.uget_raw([i, j, k]).write((i * j * k) <span class=\"kw\">as </span>i32);\n                }\n            }\n        }\n\n        arr\n    };\n\n    <span class=\"macro\">assert_eq!</span>(arr.shape(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow_from_array\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#323-342\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"numpy/array/struct.PyArray.html#tymethod.borrow_from_array\" class=\"fn\">borrow_from_array</a>&lt;'py, S&gt;(\n    array: &amp;<a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;,\n    container: Bound&lt;'py, PyAny&gt;,\n) -&gt; Bound&lt;'py, Self&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_traits/trait.Data.html\" title=\"trait ndarray::data_traits::Data\">Data</a>&lt;Elem = T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates a NumPy array backed by <code>array</code> and ties its ownership to the Python object <code>container</code>.</p>\n<p>The resulting NumPy array will be writeable from Python space.  If this is undesireable, use\n<a href=\"numpy/borrow/struct.PyReadwriteArray.html#method.make_nonwriteable\" title=\"method numpy::borrow::PyReadwriteArray::make_nonwriteable\">PyReadwriteArray::make_nonwriteable</a>.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p><code>container</code> is set as a base object of the returned array which must not be dropped until <code>container</code> is dropped.\nFurthermore, <code>array</code> must not be reallocated from the time this method is called and until <code>container</code> is dropped.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[pyclass]\n</span><span class=\"kw\">struct </span>Owner {\n    array: Array1&lt;f64&gt;,\n}\n\n<span class=\"attr\">#[pymethods]\n</span><span class=\"kw\">impl </span>Owner {\n    <span class=\"attr\">#[getter]\n    </span><span class=\"kw\">fn </span>array&lt;<span class=\"lifetime\">'py</span>&gt;(this: Bound&lt;<span class=\"lifetime\">'py</span>, <span class=\"self\">Self</span>&gt;) -&gt; Bound&lt;<span class=\"lifetime\">'py</span>, PyArray1&lt;f64&gt;&gt; {\n        <span class=\"kw\">let </span>array = <span class=\"kw-2\">&amp;</span>this.borrow().array;\n\n        <span class=\"comment\">// SAFETY: The memory backing `array` will stay valid as long as this object is alive\n        // as we do not modify `array` in any way which would cause it to be reallocated.\n        </span><span class=\"kw\">unsafe </span>{ PyArray1::borrow_from_array(array, this.into_any()) }\n    }\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zeros\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#369-384\">Source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.zeros\" class=\"fn\">zeros</a>&lt;ID&gt;(py: Python&lt;'_&gt;, dims: ID, is_fortran: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a>) -&gt; Bound&lt;'_, Self&gt;<div class=\"where\">where\n    ID: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/dimension/conversion/trait.IntoDimension.html\" title=\"trait ndarray::dimension::conversion::IntoDimension\">IntoDimension</a>&lt;Dim = D&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Construct a new NumPy array filled with zeros.</p>\n<p>If <code>is_fortran</code> is true, then it has Fortran/column-major order,\notherwise it has C/row-major order.</p>\n<p>For arrays of Python objects, this will fill the array\nwith valid pointers to zero-valued Python integer objects.</p>\n<p>See also <a href=\"https://numpy.org/doc/stable/reference/generated/numpy.zeros.html\"><code>numpy.zeros</code></a> and <a href=\"https://numpy.org/doc/stable/reference/c-api/array.html#c.PyArray_Zeros\"><code>PyArray_Zeros</code></a>.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>numpy::{PyArray2, PyArrayMethods};\n<span class=\"kw\">use </span>pyo3::Python;\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>pyarray = PyArray2::&lt;usize&gt;::zeros(py, [<span class=\"number\">2</span>, <span class=\"number\">2</span>], <span class=\"bool-val\">true</span>);\n\n    <span class=\"macro\">assert_eq!</span>(pyarray.readonly().as_slice().unwrap(), [<span class=\"number\">0</span>; <span class=\"number\">4</span>]);\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_owned_array\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#403-415\">Source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.from_owned_array\" class=\"fn\">from_owned_array</a>(py: Python&lt;'_&gt;, arr: <a class=\"type\" href=\"https://docs.rs/ndarray/0.15/ndarray/type.Array.html\" title=\"type ndarray::Array\">Array</a>&lt;T, D&gt;) -&gt; Bound&lt;'_, Self&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a NumPy from an <a href=\"https://docs.rs/ndarray/0.15/ndarray/type.Array.html\" title=\"type ndarray::Array\"><code>ndarray::Array</code></a></p>\n<p>This method uses the internal <a href=\"https://doc.rust-lang.org/1.86.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> of the <a href=\"https://docs.rs/ndarray/0.15/ndarray/type.Array.html\" title=\"type ndarray::Array\"><code>ndarray::Array</code></a> as the base object of the NumPy array.</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>numpy::{PyArray, PyArrayMethods};\n<span class=\"kw\">use </span>ndarray::array;\n<span class=\"kw\">use </span>pyo3::Python;\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>pyarray = PyArray::from_owned_array(py, <span class=\"macro\">array!</span>[[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>]]);\n\n    <span class=\"macro\">assert_eq!</span>(pyarray.readonly().as_array(), <span class=\"macro\">array!</span>[[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>]]);\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_array\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#435-440\">Source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.from_array\" class=\"fn\">from_array</a>&lt;'py, S&gt;(\n    py: Python&lt;'py&gt;,\n    arr: &amp;<a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;,\n) -&gt; Bound&lt;'py, Self&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_traits/trait.Data.html\" title=\"trait ndarray::data_traits::Data\">Data</a>&lt;Elem = T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Construct a NumPy array from a <a href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\"><code>ndarray::ArrayBase</code></a>.</p>\n<p>This method allocates memory in Python’s heap via the NumPy API,\nand then copies all elements of the array there.</p>\n<h5 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>numpy::{PyArray, PyArrayMethods};\n<span class=\"kw\">use </span>ndarray::array;\n<span class=\"kw\">use </span>pyo3::Python;\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>pyarray = PyArray::from_array(py, <span class=\"kw-2\">&amp;</span><span class=\"macro\">array!</span>[[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>]]);\n\n    <span class=\"macro\">assert_eq!</span>(pyarray.readonly().as_array(), <span class=\"macro\">array!</span>[[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>]]);\n});</code></pre></div>\n</div></details></div></details>",0,"numpy::array::PyArray0","numpy::array::PyArray1","numpy::array::PyArray2","numpy::array::PyArray3","numpy::array::PyArray4","numpy::array::PyArray5","numpy::array::PyArray6","numpy::array::PyArrayDyn"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PyArray%3CT,+Dim%3C%5Busize;+1%5D%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#494-560\">Source</a><a href=\"#impl-PyArray%3CT,+Dim%3C%5Busize;+1%5D%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"numpy/trait.Element.html\" title=\"trait numpy::Element\">Element</a>&gt; <a class=\"struct\" href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\">PyArray</a>&lt;T, <a class=\"type\" href=\"numpy/type.Ix1.html\" title=\"type numpy::Ix1\">Ix1</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_slice\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#509-516\">Source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.from_slice\" class=\"fn\">from_slice</a>&lt;'py&gt;(py: Python&lt;'py&gt;, slice: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.slice.html\">[T]</a>) -&gt; Bound&lt;'py, Self&gt;</h4></section></summary><div class=\"docblock\"><p>Construct a one-dimensional array from a <a href=\"https://doc.rust-lang.org/1.86.0/alloc/slice/index.html\" title=\"mod alloc::slice\">slice</a>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>numpy::{PyArray, PyArrayMethods};\n<span class=\"kw\">use </span>pyo3::Python;\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>slice = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n    <span class=\"kw\">let </span>pyarray = PyArray::from_slice(py, slice);\n    <span class=\"macro\">assert_eq!</span>(pyarray.readonly().as_slice().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_vec\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#533-535\">Source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.from_vec\" class=\"fn\">from_vec</a>&lt;'py&gt;(py: Python&lt;'py&gt;, vec: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;) -&gt; Bound&lt;'py, Self&gt;</h4></section></summary><div class=\"docblock\"><p>Construct a one-dimensional array from a <a href=\"https://doc.rust-lang.org/1.86.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec&lt;T&gt;</code></a>.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>numpy::{PyArray, PyArrayMethods};\n<span class=\"kw\">use </span>pyo3::Python;\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n    <span class=\"kw\">let </span>pyarray = PyArray::from_vec(py, vec);\n    <span class=\"macro\">assert_eq!</span>(pyarray.readonly().as_slice().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#553-559\">Source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(py: Python&lt;'_&gt;, iter: I) -&gt; Bound&lt;'_, Self&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Construct a one-dimensional array from an <a href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>.</p>\n<p>If no reliable <a href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/iterator/trait.Iterator.html#method.size_hint\" title=\"method core::iter::traits::iterator::Iterator::size_hint\"><code>size_hint</code></a> is available,\nthis method can allocate memory multiple times, which can hurt performance.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>numpy::{PyArray, PyArrayMethods};\n<span class=\"kw\">use </span>pyo3::Python;\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>pyarray = PyArray::from_iter(py, <span class=\"string\">\"abcde\"</span>.chars().map(u32::from));\n    <span class=\"macro\">assert_eq!</span>(pyarray.readonly().as_slice().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">97</span>, <span class=\"number\">98</span>, <span class=\"number\">99</span>, <span class=\"number\">100</span>, <span class=\"number\">101</span>]);\n});</code></pre></div>\n</div></details></div></details>",0,"numpy::array::PyArray1"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PyArray%3CT,+Dim%3C%5Busize;+1%5D%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#663-697\">Source</a><a href=\"#impl-PyArray%3CT,+Dim%3C%5Busize;+1%5D%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"numpy/trait.Element.html\" title=\"trait numpy::Element\">Element</a> + <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.f64.html\">f64</a>&gt;&gt; <a class=\"struct\" href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\">PyArray</a>&lt;T, <a class=\"type\" href=\"numpy/type.Ix1.html\" title=\"type numpy::Ix1\">Ix1</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.arange\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#685-696\">Source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.arange\" class=\"fn\">arange</a>&lt;'py&gt;(\n    py: Python&lt;'py&gt;,\n    start: T,\n    stop: T,\n    step: T,\n) -&gt; Bound&lt;'py, Self&gt;</h4></section></summary><div class=\"docblock\"><p>Return evenly spaced values within a given interval.</p>\n<p>See <a href=\"https://numpy.org/doc/stable/reference/generated/numpy.arange.html\">numpy.arange</a> for the Python API and <a href=\"https://numpy.org/doc/stable/reference/c-api/array.html#c.PyArray_Arange\">PyArray_Arange</a> for the C API.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>numpy::{PyArray, PyArrayMethods};\n<span class=\"kw\">use </span>pyo3::Python;\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>pyarray = PyArray::arange(py, <span class=\"number\">2.0</span>, <span class=\"number\">4.0</span>, <span class=\"number\">0.5</span>);\n    <span class=\"macro\">assert_eq!</span>(pyarray.readonly().as_slice().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2.0</span>, <span class=\"number\">2.5</span>, <span class=\"number\">3.0</span>, <span class=\"number\">3.5</span>]);\n\n    <span class=\"kw\">let </span>pyarray = PyArray::arange(py, -<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>);\n    <span class=\"macro\">assert_eq!</span>(pyarray.readonly().as_slice().unwrap(), <span class=\"kw-2\">&amp;</span>[-<span class=\"number\">2</span>, <span class=\"number\">1</span>]);\n});</code></pre></div>\n</div></details></div></details>",0,"numpy::array::PyArray1"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PyArray%3CT,+Dim%3C%5Busize;+2%5D%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#562-601\">Source</a><a href=\"#impl-PyArray%3CT,+Dim%3C%5Busize;+2%5D%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"numpy/trait.Element.html\" title=\"trait numpy::Element\">Element</a>&gt; <a class=\"struct\" href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\">PyArray</a>&lt;T, <a class=\"type\" href=\"numpy/type.Ix2.html\" title=\"type numpy::Ix2\">Ix2</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_vec2\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#584-600\">Source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.from_vec2\" class=\"fn\">from_vec2</a>&lt;'py&gt;(\n    py: Python&lt;'py&gt;,\n    v: &amp;[<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Bound&lt;'py, Self&gt;, <a class=\"struct\" href=\"numpy/struct.FromVecError.html\" title=\"struct numpy::FromVecError\">FromVecError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Construct a two-dimension array from a <a href=\"https://doc.rust-lang.org/1.86.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec&lt;Vec&lt;T&gt;&gt;</code></a>.</p>\n<p>This function checks all dimensions of the inner vectors and returns\nan error if they are not all equal.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>numpy::{PyArray, PyArrayMethods};\n<span class=\"kw\">use </span>pyo3::Python;\n<span class=\"kw\">use </span>ndarray::array;\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>vec2 = <span class=\"macro\">vec!</span>[<span class=\"macro\">vec!</span>[<span class=\"number\">11</span>, <span class=\"number\">12</span>], <span class=\"macro\">vec!</span>[<span class=\"number\">21</span>, <span class=\"number\">22</span>]];\n    <span class=\"kw\">let </span>pyarray = PyArray::from_vec2(py, <span class=\"kw-2\">&amp;</span>vec2).unwrap();\n    <span class=\"macro\">assert_eq!</span>(pyarray.readonly().as_array(), <span class=\"macro\">array!</span>[[<span class=\"number\">11</span>, <span class=\"number\">12</span>], [<span class=\"number\">21</span>, <span class=\"number\">22</span>]]);\n\n    <span class=\"kw\">let </span>ragged_vec2 = <span class=\"macro\">vec!</span>[<span class=\"macro\">vec!</span>[<span class=\"number\">11</span>, <span class=\"number\">12</span>], <span class=\"macro\">vec!</span>[<span class=\"number\">21</span>]];\n    <span class=\"macro\">assert!</span>(PyArray::from_vec2(py, <span class=\"kw-2\">&amp;</span>ragged_vec2).is_err());\n});</code></pre></div>\n</div></details></div></details>",0,"numpy::array::PyArray2"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PyArray%3CT,+Dim%3C%5Busize;+3%5D%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#603-661\">Source</a><a href=\"#impl-PyArray%3CT,+Dim%3C%5Busize;+3%5D%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"numpy/trait.Element.html\" title=\"trait numpy::Element\">Element</a>&gt; <a class=\"struct\" href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\">PyArray</a>&lt;T, <a class=\"type\" href=\"numpy/type.Ix3.html\" title=\"type numpy::Ix3\">Ix3</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_vec3\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#634-660\">Source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.from_vec3\" class=\"fn\">from_vec3</a>&lt;'py&gt;(\n    py: Python&lt;'py&gt;,\n    v: &amp;[<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Bound&lt;'py, Self&gt;, <a class=\"struct\" href=\"numpy/struct.FromVecError.html\" title=\"struct numpy::FromVecError\">FromVecError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Construct a three-dimensional array from a <a href=\"https://doc.rust-lang.org/1.86.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec&lt;Vec&lt;Vec&lt;T&gt;&gt;&gt;</code></a>.</p>\n<p>This function checks all dimensions of the inner vectors and returns\nan error if they are not all equal.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>numpy::{PyArray, PyArrayMethods};\n<span class=\"kw\">use </span>pyo3::Python;\n<span class=\"kw\">use </span>ndarray::array;\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>vec3 = <span class=\"macro\">vec!</span>[\n        <span class=\"macro\">vec!</span>[<span class=\"macro\">vec!</span>[<span class=\"number\">111</span>, <span class=\"number\">112</span>], <span class=\"macro\">vec!</span>[<span class=\"number\">121</span>, <span class=\"number\">122</span>]],\n        <span class=\"macro\">vec!</span>[<span class=\"macro\">vec!</span>[<span class=\"number\">211</span>, <span class=\"number\">212</span>], <span class=\"macro\">vec!</span>[<span class=\"number\">221</span>, <span class=\"number\">222</span>]],\n    ];\n    <span class=\"kw\">let </span>pyarray = PyArray::from_vec3(py, <span class=\"kw-2\">&amp;</span>vec3).unwrap();\n    <span class=\"macro\">assert_eq!</span>(\n        pyarray.readonly().as_array(),\n        <span class=\"macro\">array!</span>[[[<span class=\"number\">111</span>, <span class=\"number\">112</span>], [<span class=\"number\">121</span>, <span class=\"number\">122</span>]], [[<span class=\"number\">211</span>, <span class=\"number\">212</span>], [<span class=\"number\">221</span>, <span class=\"number\">222</span>]]]\n    );\n\n    <span class=\"kw\">let </span>ragged_vec3 = <span class=\"macro\">vec!</span>[\n        <span class=\"macro\">vec!</span>[<span class=\"macro\">vec!</span>[<span class=\"number\">111</span>, <span class=\"number\">112</span>], <span class=\"macro\">vec!</span>[<span class=\"number\">121</span>, <span class=\"number\">122</span>]],\n        <span class=\"macro\">vec!</span>[<span class=\"macro\">vec!</span>[<span class=\"number\">211</span>], <span class=\"macro\">vec!</span>[<span class=\"number\">221</span>, <span class=\"number\">222</span>]],\n    ];\n    <span class=\"macro\">assert!</span>(PyArray::from_vec3(py, <span class=\"kw-2\">&amp;</span>ragged_vec3).is_err());\n});</code></pre></div>\n</div></details></div></details>",0,"numpy::array::PyArray3"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PyTypeInfo-for-PyArray%3CT,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#126-137\">Source</a><a href=\"#impl-PyTypeInfo-for-PyArray%3CT,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"numpy/trait.Element.html\" title=\"trait numpy::Element\">Element</a>, D: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/dimension/dimension_trait/trait.Dimension.html\" title=\"trait ndarray::dimension::dimension_trait::Dimension\">Dimension</a>&gt; PyTypeInfo for <a class=\"struct\" href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\">PyArray</a>&lt;T, D&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.NAME\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#127\">Source</a><a href=\"#associatedconstant.NAME\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">NAME</a>: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a> = &quot;PyArray&lt;T, D&gt;&quot;</h4></section></summary><div class='docblock'>Class name.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MODULE\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#128\">Source</a><a href=\"#associatedconstant.MODULE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">MODULE</a>: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class='docblock'>Module name, if any.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_object_raw\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#130-132\">Source</a><a href=\"#method.type_object_raw\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">type_object_raw</a>&lt;'py&gt;(py: Python&lt;'py&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.pointer.html\">*mut </a>PyTypeObject</h4></section></summary><div class='docblock'>Returns the PyTypeObject instance for this type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_type_of\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#134-136\">Source</a><a href=\"#method.is_type_of\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_type_of</a>(ob: &amp;Bound&lt;'_, PyAny&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Checks if <code>object</code> is an instance of this type or a subclass of this type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_object\" class=\"method trait-impl\"><a href=\"#method.type_object\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">type_object</a>(py: Python&lt;'_&gt;) -&gt; Bound&lt;'_, PyType&gt;</h4></section></summary><div class='docblock'>Returns the safe abstraction over the type object.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_exact_type_of\" class=\"method trait-impl\"><a href=\"#method.is_exact_type_of\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_exact_type_of</a>(object: &amp;Bound&lt;'_, PyAny&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Checks if <code>object</code> is an instance of this type.</div></details></div></details>","PyTypeInfo","numpy::array::PyArray0","numpy::array::PyArray1","numpy::array::PyArray2","numpy::array::PyArray3","numpy::array::PyArray4","numpy::array::PyArray5","numpy::array::PyArray6","numpy::array::PyArrayDyn"],["<section id=\"impl-DerefToPyAny-for-PyArray%3CT,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#124\">Source</a><a href=\"#impl-DerefToPyAny-for-PyArray%3CT,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, D&gt; DerefToPyAny for <a class=\"struct\" href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\">PyArray</a>&lt;T, D&gt;</h3></section>","DerefToPyAny","numpy::array::PyArray0","numpy::array::PyArray1","numpy::array::PyArray2","numpy::array::PyArray3","numpy::array::PyArray4","numpy::array::PyArray5","numpy::array::PyArray6","numpy::array::PyArrayDyn"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[37485]}