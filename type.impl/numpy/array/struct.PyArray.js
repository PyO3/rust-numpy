(function() {var type_impls = {
"numpy":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPyPointer-for-PyArray%3CT,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#161-166\">source</a><a href=\"#impl-AsPyPointer-for-PyArray%3CT,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, D&gt; AsPyPointer for <a class=\"struct\" href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\">PyArray</a>&lt;T, D&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#163-165\">source</a><a href=\"#method.as_ptr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.pointer.html\">*mut </a>PyObject</h4></section></summary><div class='docblock'>Returns the underlying FFI pointer as a borrowed pointer.</div></details></div></details>","AsPyPointer","numpy::array::PyArray0","numpy::array::PyArray1","numpy::array::PyArray2","numpy::array::PyArray3","numpy::array::PyArray4","numpy::array::PyArray5","numpy::array::PyArray6","numpy::array::PyArrayDyn"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CPyAny%3E-for-PyArray%3CT,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#145-150\">source</a><a href=\"#impl-AsRef%3CPyAny%3E-for-PyArray%3CT,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;PyAny&gt; for <a class=\"struct\" href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\">PyArray</a>&lt;T, D&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#147-149\">source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;PyAny</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<PyAny>","numpy::array::PyArray0","numpy::array::PyArray1","numpy::array::PyArray2","numpy::array::PyArray3","numpy::array::PyArray4","numpy::array::PyArray5","numpy::array::PyArray6","numpy::array::PyArrayDyn"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-PyArray%3CT,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#143\">source</a><a href=\"#impl-Debug-for-PyArray%3CT,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\">PyArray</a>&lt;T, D&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#143\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","numpy::array::PyArray0","numpy::array::PyArray1","numpy::array::PyArray2","numpy::array::PyArray3","numpy::array::PyArray4","numpy::array::PyArray5","numpy::array::PyArray6","numpy::array::PyArrayDyn"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deref-for-PyArray%3CT,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#152-159\">source</a><a href=\"#impl-Deref-for-PyArray%3CT,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for <a class=\"struct\" href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\">PyArray</a>&lt;T, D&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = <a class=\"struct\" href=\"numpy/struct.PyUntypedArray.html\" title=\"struct numpy::PyUntypedArray\">PyUntypedArray</a></h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#156-158\">source</a><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a></h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","numpy::array::PyArray0","numpy::array::PyArray1","numpy::array::PyArray2","numpy::array::PyArray3","numpy::array::PyArray4","numpy::array::PyArray5","numpy::array::PyArray6","numpy::array::PyArrayDyn"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-PyArray%3CT,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#143\">source</a><a href=\"#impl-Display-for-PyArray%3CT,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\">PyArray</a>&lt;T, D&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#143\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","numpy::array::PyArray0","numpy::array::PyArray1","numpy::array::PyArray2","numpy::array::PyArray3","numpy::array::PyArray4","numpy::array::PyArray5","numpy::array::PyArray6","numpy::array::PyArrayDyn"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoPy%3CPy%3CPyAny%3E%3E-for-PyArray%3CT,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#189-193\">source</a><a href=\"#impl-IntoPy%3CPy%3CPyAny%3E%3E-for-PyArray%3CT,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, D&gt; IntoPy&lt;Py&lt;PyAny&gt;&gt; for <a class=\"struct\" href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\">PyArray</a>&lt;T, D&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_py\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#190-192\">source</a><a href=\"#method.into_py\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_py</a>&lt;'py&gt;(self, py: Python&lt;'py&gt;) -&gt; PyObject</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","IntoPy<Py<PyAny>>","numpy::array::PyArray0","numpy::array::PyArray1","numpy::array::PyArray2","numpy::array::PyArray3","numpy::array::PyArray4","numpy::array::PyArray5","numpy::array::PyArray6","numpy::array::PyArrayDyn"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PyArray%3CN,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#950-1002\">source</a><a href=\"#impl-PyArray%3CN,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, D&gt; <a class=\"struct\" href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\">PyArray</a>&lt;N, D&gt;<div class=\"where\">where\n    N: <a class=\"trait\" href=\"https://docs.rs/nalgebra/0.25.0/nalgebra/base/scalar/trait.Scalar.html\" title=\"trait nalgebra::base::scalar::Scalar\">Scalar</a> + <a class=\"trait\" href=\"numpy/trait.Element.html\" title=\"trait numpy::Element\">Element</a>,\n    D: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/dimension/dimension_trait/trait.Dimension.html\" title=\"trait ndarray::dimension::dimension_trait::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_as_matrix\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#963-977\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"numpy/array/struct.PyArray.html#tymethod.try_as_matrix\" class=\"fn\">try_as_matrix</a>&lt;R, C, RStride, CStride&gt;(\n    &amp;self,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"type\" href=\"https://docs.rs/nalgebra/0.25.0/nalgebra/base/matrix_view/type.MatrixView.html\" title=\"type nalgebra::base::matrix_view::MatrixView\">MatrixView</a>&lt;'_, N, R, C, RStride, CStride&gt;&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://docs.rs/nalgebra/0.25.0/nalgebra/base/dimension/trait.Dim.html\" title=\"trait nalgebra::base::dimension::Dim\">Dim</a>,\n    C: <a class=\"trait\" href=\"https://docs.rs/nalgebra/0.25.0/nalgebra/base/dimension/trait.Dim.html\" title=\"trait nalgebra::base::dimension::Dim\">Dim</a>,\n    RStride: <a class=\"trait\" href=\"https://docs.rs/nalgebra/0.25.0/nalgebra/base/dimension/trait.Dim.html\" title=\"trait nalgebra::base::dimension::Dim\">Dim</a>,\n    CStride: <a class=\"trait\" href=\"https://docs.rs/nalgebra/0.25.0/nalgebra/base/dimension/trait.Dim.html\" title=\"trait nalgebra::base::dimension::Dim\">Dim</a>,</div></h4></section></summary><div class=\"docblock\"><p>Try to convert this array into a <a href=\"https://docs.rs/nalgebra/0.25.0/nalgebra/base/matrix_view/type.MatrixView.html\" title=\"type nalgebra::base::matrix_view::MatrixView\"><code>nalgebra::MatrixView</code></a> using the given shape and strides.</p>\n<p>See <a href=\"numpy/borrow/struct.PyReadonlyArray.html#method.try_as_matrix\" title=\"method numpy::borrow::PyReadonlyArray::try_as_matrix\"><code>PyReadonlyArray::try_as_matrix</code></a> for a discussion of the memory layout requirements.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Calling this method invalidates all exclusive references to the internal data, e.g. <code>ArrayViewMut</code> or <code>MatrixSliceMut</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_as_matrix_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#987-1001\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"numpy/array/struct.PyArray.html#tymethod.try_as_matrix_mut\" class=\"fn\">try_as_matrix_mut</a>&lt;R, C, RStride, CStride&gt;(\n    &amp;self,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"type\" href=\"https://docs.rs/nalgebra/0.25.0/nalgebra/base/matrix_view/type.MatrixViewMut.html\" title=\"type nalgebra::base::matrix_view::MatrixViewMut\">MatrixViewMut</a>&lt;'_, N, R, C, RStride, CStride&gt;&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://docs.rs/nalgebra/0.25.0/nalgebra/base/dimension/trait.Dim.html\" title=\"trait nalgebra::base::dimension::Dim\">Dim</a>,\n    C: <a class=\"trait\" href=\"https://docs.rs/nalgebra/0.25.0/nalgebra/base/dimension/trait.Dim.html\" title=\"trait nalgebra::base::dimension::Dim\">Dim</a>,\n    RStride: <a class=\"trait\" href=\"https://docs.rs/nalgebra/0.25.0/nalgebra/base/dimension/trait.Dim.html\" title=\"trait nalgebra::base::dimension::Dim\">Dim</a>,\n    CStride: <a class=\"trait\" href=\"https://docs.rs/nalgebra/0.25.0/nalgebra/base/dimension/trait.Dim.html\" title=\"trait nalgebra::base::dimension::Dim\">Dim</a>,</div></h4></section></summary><div class=\"docblock\"><p>Try to convert this array into a <a href=\"https://docs.rs/nalgebra/0.25.0/nalgebra/base/matrix_view/type.MatrixViewMut.html\" title=\"type nalgebra::base::matrix_view::MatrixViewMut\"><code>nalgebra::MatrixViewMut</code></a> using the given shape and strides.</p>\n<p>See <a href=\"numpy/borrow/struct.PyReadonlyArray.html#method.try_as_matrix\" title=\"method numpy::borrow::PyReadonlyArray::try_as_matrix\"><code>PyReadonlyArray::try_as_matrix</code></a> for a discussion of the memory layout requirements.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>Calling this method invalidates all other references to the internal data, e.g. <code>ArrayView</code>, <code>MatrixSlice</code>, <code>ArrayViewMut</code> or <code>MatrixSliceMut</code>.</p>\n</div></details></div></details>",0,"numpy::array::PyArray0","numpy::array::PyArray1","numpy::array::PyArray2","numpy::array::PyArray3","numpy::array::PyArray4","numpy::array::PyArray5","numpy::array::PyArray6","numpy::array::PyArrayDyn"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PyArray%3CPy%3CPyAny%3E,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#1004-1066\">source</a><a href=\"#impl-PyArray%3CPy%3CPyAny%3E,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;D: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/dimension/dimension_trait/trait.Dimension.html\" title=\"trait ndarray::dimension::dimension_trait::Dimension\">Dimension</a>&gt; <a class=\"struct\" href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\">PyArray</a>&lt;PyObject, D&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_owned_object_array\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#1011-1013\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.from_owned_object_array\" class=\"fn\">from_owned_object_array</a>&lt;'py, T&gt;(\n    py: Python&lt;'py&gt;,\n    arr: <a class=\"type\" href=\"https://docs.rs/ndarray/0.15/ndarray/type.Array.html\" title=\"type ndarray::Array\">Array</a>&lt;Py&lt;T&gt;, D&gt;,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'py Self</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.21.0: will be replaced by PyArray::from_owned_object_array_bound in the future</span></div></span></summary><div class=\"docblock\"><p>Deprecated form of <a href=\"numpy/array/struct.PyArray.html#method.from_owned_object_array_bound\" title=\"associated function numpy::array::PyArray::from_owned_object_array_bound\"><code>PyArray&lt;T, D&gt;::from_owned_object_array_bound</code></a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_owned_object_array_bound\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#1050-1065\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.from_owned_object_array_bound\" class=\"fn\">from_owned_object_array_bound</a>&lt;T&gt;(\n    py: Python&lt;'_&gt;,\n    arr: <a class=\"type\" href=\"https://docs.rs/ndarray/0.15/ndarray/type.Array.html\" title=\"type ndarray::Array\">Array</a>&lt;Py&lt;T&gt;, D&gt;,\n) -&gt; Bound&lt;'_, Self&gt;</h4></section></summary><div class=\"docblock\"><p>Construct a NumPy array containing objects stored in a <a href=\"https://docs.rs/ndarray/0.15/ndarray/type.Array.html\" title=\"type ndarray::Array\"><code>ndarray::Array</code></a></p>\n<p>This method uses the internal <a href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> of the <a href=\"https://docs.rs/ndarray/0.15/ndarray/type.Array.html\" title=\"type ndarray::Array\"><code>ndarray::Array</code></a> as the base object of the NumPy array.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::array;\n<span class=\"kw\">use </span>pyo3::{pyclass, Py, Python, types::PyAnyMethods};\n<span class=\"kw\">use </span>numpy::{PyArray, PyArrayMethods};\n\n<span class=\"attr\">#[pyclass]\n</span><span class=\"kw\">struct </span>CustomElement {\n    foo: i32,\n    bar: f64,\n}\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>array = <span class=\"macro\">array!</span>[\n        Py::new(py, CustomElement {\n            foo: <span class=\"number\">1</span>,\n            bar: <span class=\"number\">2.0</span>,\n        }).unwrap(),\n        Py::new(py, CustomElement {\n            foo: <span class=\"number\">3</span>,\n            bar: <span class=\"number\">4.0</span>,\n        }).unwrap(),\n    ];\n\n    <span class=\"kw\">let </span>pyarray = PyArray::from_owned_object_array_bound(py, array);\n\n    <span class=\"macro\">assert!</span>(pyarray.readonly().as_array().get(<span class=\"number\">0</span>).unwrap().bind(py).is_instance_of::&lt;CustomElement&gt;());\n});</code></pre></div>\n</div></details></div></details>",0,"numpy::array::PyArray0","numpy::array::PyArray1","numpy::array::PyArray2","numpy::array::PyArray3","numpy::array::PyArray4","numpy::array::PyArray5","numpy::array::PyArray6","numpy::array::PyArrayDyn"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PyArray%3CT,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#1305-1473\">source</a><a href=\"#impl-PyArray%3CT,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"numpy/trait.Element.html\" title=\"trait numpy::Element\">Element</a>, D&gt; <a class=\"struct\" href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\">PyArray</a>&lt;T, D&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.copy_to\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#1327-1329\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.copy_to\" class=\"fn\">copy_to</a>&lt;U: <a class=\"trait\" href=\"numpy/trait.Element.html\" title=\"trait numpy::Element\">Element</a>&gt;(&amp;self, other: &amp;<a class=\"struct\" href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\">PyArray</a>&lt;U, D&gt;) -&gt; PyResult&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Copies <code>self</code> into <code>other</code>, performing a data type conversion if necessary.</p>\n<p>See also <a href=\"https://numpy.org/doc/stable/reference/c-api/array.html#c.PyArray_CopyInto\"><code>PyArray_CopyInto</code></a>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>numpy::{PyArray, PyArrayMethods};\n<span class=\"kw\">use </span>pyo3::Python;\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>pyarray_f = PyArray::arange_bound(py, <span class=\"number\">2.0</span>, <span class=\"number\">5.0</span>, <span class=\"number\">1.0</span>);\n    <span class=\"kw\">let </span>pyarray_i = <span class=\"kw\">unsafe </span>{ PyArray::&lt;i64, <span class=\"kw\">_</span>&gt;::new_bound(py, [<span class=\"number\">3</span>], <span class=\"bool-val\">false</span>) };\n\n    <span class=\"macro\">assert!</span>(pyarray_f.copy_to(<span class=\"kw-2\">&amp;</span>pyarray_i).is_ok());\n\n    <span class=\"macro\">assert_eq!</span>(pyarray_i.readonly().as_slice().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cast\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#1351-1353\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.cast\" class=\"fn\">cast</a>&lt;'py, U: <a class=\"trait\" href=\"numpy/trait.Element.html\" title=\"trait numpy::Element\">Element</a>&gt;(\n    &amp;'py self,\n    is_fortran: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>,\n) -&gt; PyResult&lt;&amp;'py <a class=\"struct\" href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\">PyArray</a>&lt;U, D&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Cast the <code>PyArray&lt;T&gt;</code> to <code>PyArray&lt;U&gt;</code>, by allocating a new array.</p>\n<p>See also <a href=\"https://numpy.org/doc/stable/reference/c-api/array.html#c.PyArray_CastToType\"><code>PyArray_CastToType</code></a>.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>numpy::{PyArray, PyArrayMethods};\n<span class=\"kw\">use </span>pyo3::Python;\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>pyarray_f = PyArray::arange_bound(py, <span class=\"number\">2.0</span>, <span class=\"number\">5.0</span>, <span class=\"number\">1.0</span>);\n\n    <span class=\"kw\">let </span>pyarray_i = pyarray_f.cast::&lt;i32&gt;(<span class=\"bool-val\">false</span>).unwrap();\n\n    <span class=\"macro\">assert_eq!</span>(pyarray_i.readonly().as_slice().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.permute\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#1380-1385\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.permute\" class=\"fn\">permute</a>&lt;'py, ID: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/dimension/conversion/trait.IntoDimension.html\" title=\"trait ndarray::dimension::conversion::IntoDimension\">IntoDimension</a>&gt;(\n    &amp;'py self,\n    axes: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;ID&gt;,\n) -&gt; PyResult&lt;&amp;'py <a class=\"struct\" href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\">PyArray</a>&lt;T, D&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>A view of <code>self</code> with a different order of axes determined by <code>axes</code>.</p>\n<p>If <code>axes</code> is <code>None</code>, the order of axes is reversed which corresponds to the standard matrix transpose.</p>\n<p>See also <a href=\"https://numpy.org/doc/stable/reference/generated/numpy.transpose.html\"><code>numpy.transpose</code></a> and <a href=\"https://numpy.org/doc/stable/reference/c-api/array.html#c.PyArray_Transpose\"><code>PyArray_Transpose</code></a>.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>numpy::prelude::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>numpy::PyArray;\n<span class=\"kw\">use </span>pyo3::Python;\n<span class=\"kw\">use </span>ndarray::array;\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>array = <span class=\"macro\">array!</span>[[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]].into_pyarray(py);\n\n    <span class=\"kw\">let </span>array = array.permute(<span class=\"prelude-val\">Some</span>([<span class=\"number\">1</span>, <span class=\"number\">0</span>])).unwrap();\n\n    <span class=\"macro\">assert_eq!</span>(array.readonly().as_array(), <span class=\"macro\">array!</span>[[<span class=\"number\">0</span>, <span class=\"number\">3</span>], [<span class=\"number\">1</span>, <span class=\"number\">4</span>], [<span class=\"number\">2</span>, <span class=\"number\">5</span>]]);\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transpose\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#1388-1390\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.transpose\" class=\"fn\">transpose</a>&lt;'py&gt;(&amp;'py self) -&gt; PyResult&lt;&amp;'py <a class=\"struct\" href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\">PyArray</a>&lt;T, D&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Special case of <a href=\"numpy/array/struct.PyArray.html#method.permute\" title=\"method numpy::array::PyArray::permute\"><code>permute</code></a> which reverses the order the axes.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reshape_with_order\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#1419-1427\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.reshape_with_order\" class=\"fn\">reshape_with_order</a>&lt;'py, ID: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/dimension/conversion/trait.IntoDimension.html\" title=\"trait ndarray::dimension::conversion::IntoDimension\">IntoDimension</a>&gt;(\n    &amp;'py self,\n    shape: ID,\n    order: <a class=\"enum\" href=\"numpy/npyffi/types/enum.NPY_ORDER.html\" title=\"enum numpy::npyffi::types::NPY_ORDER\">NPY_ORDER</a>,\n) -&gt; PyResult&lt;&amp;'py <a class=\"struct\" href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\">PyArray</a>&lt;T, ID::<a class=\"associatedtype\" href=\"https://docs.rs/ndarray/0.15/ndarray/dimension/conversion/trait.IntoDimension.html#associatedtype.Dim\" title=\"type ndarray::dimension::conversion::IntoDimension::Dim\">Dim</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Construct a new array which has same values as self,\nbut has different dimensions specified by <code>shape</code>\nand a possibly different memory order specified by <code>order</code>.</p>\n<p>See also <a href=\"https://numpy.org/doc/stable/reference/generated/numpy.reshape.html\"><code>numpy.reshape</code></a> and <a href=\"https://numpy.org/doc/stable/reference/c-api/array.html#c.PyArray_Newshape\"><code>PyArray_Newshape</code></a>.</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>numpy::prelude::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>numpy::{npyffi::NPY_ORDER, PyArray};\n<span class=\"kw\">use </span>pyo3::Python;\n<span class=\"kw\">use </span>ndarray::array;\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>array =\n        PyArray::from_iter_bound(py, <span class=\"number\">0</span>..<span class=\"number\">9</span>).reshape_with_order([<span class=\"number\">3</span>, <span class=\"number\">3</span>], NPY_ORDER::NPY_FORTRANORDER).unwrap();\n\n    <span class=\"macro\">assert_eq!</span>(array.readonly().as_array(), <span class=\"macro\">array!</span>[[<span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>], [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>], [<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>]]);\n    <span class=\"macro\">assert!</span>(array.is_fortran_contiguous());\n\n    <span class=\"macro\">assert!</span>(array.reshape([<span class=\"number\">5</span>]).is_err());\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reshape\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#1431-1436\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.reshape\" class=\"fn\">reshape</a>&lt;'py, ID: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/dimension/conversion/trait.IntoDimension.html\" title=\"trait ndarray::dimension::conversion::IntoDimension\">IntoDimension</a>&gt;(\n    &amp;'py self,\n    shape: ID,\n) -&gt; PyResult&lt;&amp;'py <a class=\"struct\" href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\">PyArray</a>&lt;T, ID::<a class=\"associatedtype\" href=\"https://docs.rs/ndarray/0.15/ndarray/dimension/conversion/trait.IntoDimension.html#associatedtype.Dim\" title=\"type ndarray::dimension::conversion::IntoDimension::Dim\">Dim</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Special case of <a href=\"numpy/array/struct.PyArray.html#method.reshape_with_order\" title=\"method numpy::array::PyArray::reshape_with_order\"><code>reshape_with_order</code></a> which keeps the memory order the same.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#1470-1472\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"numpy/array/struct.PyArray.html#tymethod.resize\" class=\"fn\">resize</a>&lt;ID: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/dimension/conversion/trait.IntoDimension.html\" title=\"trait ndarray::dimension::conversion::IntoDimension\">IntoDimension</a>&gt;(&amp;self, newshape: ID) -&gt; PyResult&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Extends or truncates the dimensions of an array.</p>\n<p>This method works only on <a href=\"numpy/struct.PyUntypedArray.html#method.is_contiguous\" title=\"method numpy::PyUntypedArray::is_contiguous\">contiguous</a> arrays.\nMissing elements will be initialized as if calling <a href=\"numpy/array/struct.PyArray.html#method.zeros\" title=\"associated function numpy::array::PyArray::zeros\"><code>zeros</code></a>.</p>\n<p>See also <a href=\"https://numpy.org/doc/stable/reference/generated/numpy.ndarray.resize.html\"><code>ndarray.resize</code></a> and <a href=\"https://numpy.org/doc/stable/reference/c-api/array.html#c.PyArray_Resize\"><code>PyArray_Resize</code></a>.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>There should be no outstanding references (shared or exclusive) into the array\nas this method might re-allocate it and thereby invalidate all pointers into it.</p>\n<h5 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>numpy::prelude::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>numpy::PyArray;\n<span class=\"kw\">use </span>pyo3::Python;\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>pyarray = PyArray::&lt;f64, <span class=\"kw\">_</span>&gt;::zeros_bound(py, (<span class=\"number\">10</span>, <span class=\"number\">10</span>), <span class=\"bool-val\">false</span>);\n    <span class=\"macro\">assert_eq!</span>(pyarray.shape(), [<span class=\"number\">10</span>, <span class=\"number\">10</span>]);\n\n    <span class=\"kw\">unsafe </span>{\n        pyarray.resize((<span class=\"number\">100</span>, <span class=\"number\">100</span>)).unwrap();\n    }\n    <span class=\"macro\">assert_eq!</span>(pyarray.shape(), [<span class=\"number\">100</span>, <span class=\"number\">100</span>]);\n});</code></pre></div>\n</div></details></div></details>",0,"numpy::array::PyArray0","numpy::array::PyArray1","numpy::array::PyArray2","numpy::array::PyArray3","numpy::array::PyArray4","numpy::array::PyArray5","numpy::array::PyArray6","numpy::array::PyArrayDyn"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PyArray%3CT,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#202-208\">source</a><a href=\"#impl-PyArray%3CT,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, D&gt; <a class=\"struct\" href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\">PyArray</a>&lt;T, D&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_untyped\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#205-207\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.as_untyped\" class=\"fn\">as_untyped</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"numpy/struct.PyUntypedArray.html\" title=\"struct numpy::PyUntypedArray\">PyUntypedArray</a></h4></section></summary><div class=\"docblock\"><p>Access an untyped representation of this array.</p>\n</div></details></div></details>",0,"numpy::array::PyArray0","numpy::array::PyArray1","numpy::array::PyArray2","numpy::array::PyArray3","numpy::array::PyArray4","numpy::array::PyArray5","numpy::array::PyArray6","numpy::array::PyArrayDyn"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PyArray%3CT,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#211-264\">source</a><a href=\"#impl-PyArray%3CT,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, D&gt; <a class=\"struct\" href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\">PyArray</a>&lt;T, D&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_owned\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#233-235\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; Py&lt;Self&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.21.0: use Bound::unbind() instead</span></div></span></summary><div class=\"docblock\"><p>Turn <code>&amp;PyArray&lt;T,D&gt;</code> into <code>Py&lt;PyArray&lt;T,D&gt;&gt;</code>,\ni.e. a pointer into Python’s heap which is independent of the GIL lifetime.</p>\n<p>This method can be used to avoid lifetime annotations of function arguments\nor return values.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>numpy::{PyArray1, PyArrayMethods};\n<span class=\"kw\">use </span>pyo3::{Py, Python};\n\n<span class=\"kw\">let </span>array: Py&lt;PyArray1&lt;f64&gt;&gt; = Python::with_gil(|py| {\n    PyArray1::zeros_bound(py, <span class=\"number\">5</span>, <span class=\"bool-val\">false</span>).unbind()\n});\n\nPython::with_gil(|py| {\n    <span class=\"macro\">assert_eq!</span>(array.bind(py).readonly().as_slice().unwrap(), [<span class=\"number\">0.0</span>; <span class=\"number\">5</span>]);\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_owned_ptr\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#243-246\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"numpy/array/struct.PyArray.html#tymethod.from_owned_ptr\" class=\"fn\">from_owned_ptr</a>&lt;'py&gt;(\n    py: Python&lt;'py&gt;,\n    ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.pointer.html\">*mut </a>PyObject,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'py Self</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.21.0: use Bound::from_owned_ptr() instead</span></div></span></summary><div class=\"docblock\"><p>Constructs a reference to a <code>PyArray</code> from a raw pointer to a Python object.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This is a wrapper around [<code>pyo3::FromPyPointer::from_owned_ptr_or_opt</code>] and inherits its safety contract.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_borrowed_ptr\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#254-257\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"numpy/array/struct.PyArray.html#tymethod.from_borrowed_ptr\" class=\"fn\">from_borrowed_ptr</a>&lt;'py&gt;(\n    py: Python&lt;'py&gt;,\n    ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.pointer.html\">*mut </a>PyObject,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'py Self</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.21.0: use Bound::from_borrowed_ptr() instead</span></div></span></summary><div class=\"docblock\"><p>Constructs a reference to a <code>PyArray</code> from a raw point to a Python object.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>This is a wrapper around [<code>pyo3::FromPyPointer::from_borrowed_ptr_or_opt</code>] and inherits its safety contract.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.data\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#261-263\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.data\" class=\"fn\">data</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Returns a pointer to the first element of the array.</p>\n</div></details></div></details>",0,"numpy::array::PyArray0","numpy::array::PyArray1","numpy::array::PyArray2","numpy::array::PyArray3","numpy::array::PyArray4","numpy::array::PyArray5","numpy::array::PyArray6","numpy::array::PyArrayDyn"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PyArray%3CT,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#266-569\">source</a><a href=\"#impl-PyArray%3CT,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"numpy/trait.Element.html\" title=\"trait numpy::Element\">Element</a>, D: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/dimension/dimension_trait/trait.Dimension.html\" title=\"trait ndarray::dimension::dimension_trait::Dimension\">Dimension</a>&gt; <a class=\"struct\" href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\">PyArray</a>&lt;T, D&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_bound\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#338-348\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"numpy/array/struct.PyArray.html#tymethod.new_bound\" class=\"fn\">new_bound</a>&lt;'py, ID&gt;(\n    py: Python&lt;'py&gt;,\n    dims: ID,\n    is_fortran: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>,\n) -&gt; Bound&lt;'py, Self&gt;<div class=\"where\">where\n    ID: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/dimension/conversion/trait.IntoDimension.html\" title=\"trait ndarray::dimension::conversion::IntoDimension\">IntoDimension</a>&lt;Dim = D&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates a new uninitialized NumPy array.</p>\n<p>If <code>is_fortran</code> is true, then it has Fortran/column-major order,\notherwise it has C/row-major order.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>The returned array will always be safe to be dropped as the elements must either\nbe trivially copyable (as indicated by <code>&lt;T as Element&gt;::IS_COPY</code>) or be pointers\ninto Python’s heap, which NumPy will automatically zero-initialize.</p>\n<p>However, the elements themselves will not be valid and should be initialized manually\nusing raw pointers obtained via <a href=\"numpy/array/struct.PyArray.html#method.uget_raw\" title=\"method numpy::array::PyArray::uget_raw\"><code>uget_raw</code></a>. Before that, all methods\nwhich produce references to the elements invoke undefined behaviour. In particular,\nzero-initialized pointers are <em>not</em> valid instances of <code>PyObject</code>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>numpy::prelude::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>numpy::PyArray3;\n<span class=\"kw\">use </span>pyo3::Python;\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>arr = <span class=\"kw\">unsafe </span>{\n        <span class=\"kw\">let </span>arr = PyArray3::&lt;i32&gt;::new_bound(py, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], <span class=\"bool-val\">false</span>);\n\n        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">4 </span>{\n            <span class=\"kw\">for </span>j <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">5 </span>{\n                <span class=\"kw\">for </span>k <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">6 </span>{\n                    arr.uget_raw([i, j, k]).write((i * j * k) <span class=\"kw\">as </span>i32);\n                }\n            }\n        }\n\n        arr\n    };\n\n    <span class=\"macro\">assert_eq!</span>(arr.shape(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow_from_array_bound\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#451-470\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"numpy/array/struct.PyArray.html#tymethod.borrow_from_array_bound\" class=\"fn\">borrow_from_array_bound</a>&lt;'py, S&gt;(\n    array: &amp;<a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;,\n    container: Bound&lt;'py, PyAny&gt;,\n) -&gt; Bound&lt;'py, Self&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_traits/trait.Data.html\" title=\"trait ndarray::data_traits::Data\">Data</a>&lt;Elem = T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates a NumPy array backed by <code>array</code> and ties its ownership to the Python object <code>container</code>.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p><code>container</code> is set as a base object of the returned array which must not be dropped until <code>container</code> is dropped.\nFurthermore, <code>array</code> must not be reallocated from the time this method is called and until <code>container</code> is dropped.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[pyclass]\n</span><span class=\"kw\">struct </span>Owner {\n    array: Array1&lt;f64&gt;,\n}\n\n<span class=\"attr\">#[pymethods]\n</span><span class=\"kw\">impl </span>Owner {\n    <span class=\"attr\">#[getter]\n    </span><span class=\"kw\">fn </span>array&lt;<span class=\"lifetime\">'py</span>&gt;(this: Bound&lt;<span class=\"lifetime\">'py</span>, <span class=\"self\">Self</span>&gt;) -&gt; Bound&lt;<span class=\"lifetime\">'py</span>, PyArray1&lt;f64&gt;&gt; {\n        <span class=\"kw\">let </span>array = <span class=\"kw-2\">&amp;</span>this.borrow().array;\n\n        <span class=\"comment\">// SAFETY: The memory backing `array` will stay valid as long as this object is alive\n        // as we do not modify `array` in any way which would cause it to be reallocated.\n        </span><span class=\"kw\">unsafe </span>{ PyArray1::borrow_from_array_bound(array, this.into_any()) }\n    }\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zeros_bound\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#497-512\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.zeros_bound\" class=\"fn\">zeros_bound</a>&lt;ID&gt;(\n    py: Python&lt;'_&gt;,\n    dims: ID,\n    is_fortran: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>,\n) -&gt; Bound&lt;'_, Self&gt;<div class=\"where\">where\n    ID: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/dimension/conversion/trait.IntoDimension.html\" title=\"trait ndarray::dimension::conversion::IntoDimension\">IntoDimension</a>&lt;Dim = D&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Construct a new NumPy array filled with zeros.</p>\n<p>If <code>is_fortran</code> is true, then it has Fortran/column-major order,\notherwise it has C/row-major order.</p>\n<p>For arrays of Python objects, this will fill the array\nwith valid pointers to zero-valued Python integer objects.</p>\n<p>See also <a href=\"https://numpy.org/doc/stable/reference/generated/numpy.zeros.html\"><code>numpy.zeros</code></a> and <a href=\"https://numpy.org/doc/stable/reference/c-api/array.html#c.PyArray_Zeros\"><code>PyArray_Zeros</code></a>.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>numpy::{PyArray2, PyArrayMethods};\n<span class=\"kw\">use </span>pyo3::Python;\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>pyarray = PyArray2::&lt;usize&gt;::zeros_bound(py, [<span class=\"number\">2</span>, <span class=\"number\">2</span>], <span class=\"bool-val\">true</span>);\n\n    <span class=\"macro\">assert_eq!</span>(pyarray.readonly().as_slice().unwrap(), [<span class=\"number\">0</span>; <span class=\"number\">4</span>]);\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_owned_array_bound\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#531-543\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.from_owned_array_bound\" class=\"fn\">from_owned_array_bound</a>(\n    py: Python&lt;'_&gt;,\n    arr: <a class=\"type\" href=\"https://docs.rs/ndarray/0.15/ndarray/type.Array.html\" title=\"type ndarray::Array\">Array</a>&lt;T, D&gt;,\n) -&gt; Bound&lt;'_, Self&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a NumPy from an <a href=\"https://docs.rs/ndarray/0.15/ndarray/type.Array.html\" title=\"type ndarray::Array\"><code>ndarray::Array</code></a></p>\n<p>This method uses the internal <a href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> of the <a href=\"https://docs.rs/ndarray/0.15/ndarray/type.Array.html\" title=\"type ndarray::Array\"><code>ndarray::Array</code></a> as the base object of the NumPy array.</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>numpy::{PyArray, PyArrayMethods};\n<span class=\"kw\">use </span>ndarray::array;\n<span class=\"kw\">use </span>pyo3::Python;\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>pyarray = PyArray::from_owned_array_bound(py, <span class=\"macro\">array!</span>[[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>]]);\n\n    <span class=\"macro\">assert_eq!</span>(pyarray.readonly().as_array(), <span class=\"macro\">array!</span>[[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>]]);\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_array_bound\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#563-568\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.from_array_bound\" class=\"fn\">from_array_bound</a>&lt;'py, S&gt;(\n    py: Python&lt;'py&gt;,\n    arr: &amp;<a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;,\n) -&gt; Bound&lt;'py, Self&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_traits/trait.Data.html\" title=\"trait ndarray::data_traits::Data\">Data</a>&lt;Elem = T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Construct a NumPy array from a <a href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\"><code>ndarray::ArrayBase</code></a>.</p>\n<p>This method allocates memory in Python’s heap via the NumPy API,\nand then copies all elements of the array there.</p>\n<h5 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>numpy::{PyArray, PyArrayMethods};\n<span class=\"kw\">use </span>ndarray::array;\n<span class=\"kw\">use </span>pyo3::Python;\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>pyarray = PyArray::from_array_bound(py, <span class=\"kw-2\">&amp;</span><span class=\"macro\">array!</span>[[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>]]);\n\n    <span class=\"macro\">assert_eq!</span>(pyarray.readonly().as_array(), <span class=\"macro\">array!</span>[[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>]]);\n});</code></pre></div>\n</div></details></div></details>",0,"numpy::array::PyArray0","numpy::array::PyArray1","numpy::array::PyArray2","numpy::array::PyArray3","numpy::array::PyArray4","numpy::array::PyArray5","numpy::array::PyArray6","numpy::array::PyArrayDyn"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PyArray%3CT,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#572-946\">source</a><a href=\"#impl-PyArray%3CT,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"numpy/trait.Element.html\" title=\"trait numpy::Element\">Element</a>, D: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/dimension/dimension_trait/trait.Dimension.html\" title=\"trait ndarray::dimension::dimension_trait::Dimension\">Dimension</a>&gt; <a class=\"struct\" href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\">PyArray</a>&lt;T, D&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.dims\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#575-577\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.dims\" class=\"fn\">dims</a>(&amp;self) -&gt; D</h4></section></summary><div class=\"docblock\"><p>Same as <a href=\"numpy/struct.PyUntypedArray.html#method.shape\" title=\"method numpy::PyUntypedArray::shape\"><code>shape</code></a>, but returns <code>D</code> instead of <code>&amp;[usize]</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#587-592\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"numpy/array/struct.PyArray.html#tymethod.new\" class=\"fn\">new</a>&lt;'py, ID&gt;(py: Python&lt;'py&gt;, dims: ID, is_fortran: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;Self</a><div class=\"where\">where\n    ID: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/dimension/conversion/trait.IntoDimension.html\" title=\"trait ndarray::dimension::conversion::IntoDimension\">IntoDimension</a>&lt;Dim = D&gt;,</div></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.21.0: will be replaced by <code>PyArray::new_bound</code> in the future</span></div></span></summary><div class=\"docblock\"><p>Deprecated form of <a href=\"numpy/array/struct.PyArray.html#method.new_bound\" title=\"associated function numpy::array::PyArray::new_bound\"><code>PyArray&lt;T, D&gt;::new_bound</code></a></p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Same as <a href=\"numpy/array/struct.PyArray.html#method.new_bound\" title=\"associated function numpy::array::PyArray::new_bound\"><code>PyArray&lt;T, D&gt;::new_bound</code></a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow_from_array\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#602-610\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"numpy/array/struct.PyArray.html#tymethod.borrow_from_array\" class=\"fn\">borrow_from_array</a>&lt;'py, S&gt;(\n    array: &amp;<a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;,\n    container: &amp;'py PyAny,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'py Self</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_traits/trait.Data.html\" title=\"trait ndarray::data_traits::Data\">Data</a>&lt;Elem = T&gt;,</div></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.21.0: will be replaced by <code>PyArray::borrow_from_array_bound</code> in the future</span></div></span></summary><div class=\"docblock\"><p>Deprecated form of <a href=\"numpy/array/struct.PyArray.html#method.borrow_from_array_bound\" title=\"associated function numpy::array::PyArray::borrow_from_array_bound\"><code>PyArray&lt;T, D&gt;::borrow_from_array_bound</code></a></p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>Same as <a href=\"numpy/array/struct.PyArray.html#method.borrow_from_array_bound\" title=\"associated function numpy::array::PyArray::borrow_from_array_bound\"><code>PyArray&lt;T, D&gt;::borrow_from_array_bound</code></a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zeros\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#617-622\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.zeros\" class=\"fn\">zeros</a>&lt;'py, ID&gt;(py: Python&lt;'py&gt;, dims: ID, is_fortran: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;Self</a><div class=\"where\">where\n    ID: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/dimension/conversion/trait.IntoDimension.html\" title=\"trait ndarray::dimension::conversion::IntoDimension\">IntoDimension</a>&lt;Dim = D&gt;,</div></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.21.0: will be replaced by <code>PyArray::zeros_bound</code> in the future</span></div></span></summary><div class=\"docblock\"><p>Deprecated form of <a href=\"numpy/array/struct.PyArray.html#method.zeros_bound\" title=\"associated function numpy::array::PyArray::zeros_bound\"><code>PyArray&lt;T, D&gt;::zeros_bound</code></a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#633-639\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"numpy/array/struct.PyArray.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.slice.html\">[T]</a>, <a class=\"struct\" href=\"numpy/struct.NotContiguousError.html\" title=\"struct numpy::NotContiguousError\">NotContiguousError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an immutable view of the internal data as a slice.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<p>Calling this method is undefined behaviour if the underlying array\nis aliased mutably by other instances of <code>PyArray</code>\nor concurrently modified by Python or other native code.</p>\n<p>Please consider the safe alternative <a href=\"numpy/borrow/struct.PyReadonlyArray.html#method.as_slice\" title=\"method numpy::borrow::PyReadonlyArray::as_slice\"><code>PyReadonlyArray::as_slice</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#650-656\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"numpy/array/struct.PyArray.html#tymethod.as_slice_mut\" class=\"fn\">as_slice_mut</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.slice.html\">[T]</a>, <a class=\"struct\" href=\"numpy/struct.NotContiguousError.html\" title=\"struct numpy::NotContiguousError\">NotContiguousError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable view of the internal data as a slice.</p>\n<h5 id=\"safety-3\"><a class=\"doc-anchor\" href=\"#safety-3\">§</a>Safety</h5>\n<p>Calling this method is undefined behaviour if the underlying array\nis aliased immutably or mutably by other instances of <a href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\"><code>PyArray</code></a>\nor concurrently modified by Python or other native code.</p>\n<p>Please consider the safe alternative <a href=\"numpy/borrow/struct.PyReadwriteArray.html#method.as_slice_mut\" title=\"method numpy::borrow::PyReadwriteArray::as_slice_mut\"><code>PyReadwriteArray::as_slice_mut</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_owned_array\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#663-665\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.from_owned_array\" class=\"fn\">from_owned_array</a>&lt;'py&gt;(py: Python&lt;'py&gt;, arr: <a class=\"type\" href=\"https://docs.rs/ndarray/0.15/ndarray/type.Array.html\" title=\"type ndarray::Array\">Array</a>&lt;T, D&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'py Self</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.21.0: will be replaced by PyArray::from_owned_array_bound in the future</span></div></span></summary><div class=\"docblock\"><p>Deprecated form of <a href=\"numpy/array/struct.PyArray.html#method.from_owned_array_bound\" title=\"associated function numpy::array::PyArray::from_owned_array_bound\"><code>PyArray&lt;T, D&gt;::from_owned_array_bound</code></a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#690-693\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"numpy/array/struct.PyArray.html#tymethod.get\" class=\"fn\">get</a>(&amp;self, index: impl <a class=\"trait\" href=\"numpy/convert/trait.NpyIndex.html\" title=\"trait numpy::convert::NpyIndex\">NpyIndex</a>&lt;Dim = D&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Get a reference of the specified element if the given index is valid.</p>\n<h5 id=\"safety-4\"><a class=\"doc-anchor\" href=\"#safety-4\">§</a>Safety</h5>\n<p>Calling this method is undefined behaviour if the underlying array\nis aliased mutably by other instances of <code>PyArray</code>\nor concurrently modified by Python or other native code.</p>\n<p>Consider using safe alternatives like <a href=\"numpy/borrow/struct.PyReadonlyArray.html#method.get\" title=\"method numpy::borrow::PyReadonlyArray::get\"><code>PyReadonlyArray::get</code></a>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>numpy::{PyArray, PyArrayMethods};\n<span class=\"kw\">use </span>pyo3::Python;\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>pyarray = PyArray::arange_bound(py, <span class=\"number\">0</span>, <span class=\"number\">16</span>, <span class=\"number\">1</span>).reshape([<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>]).unwrap();\n\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">*</span>pyarray.get([<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>]).unwrap() }, <span class=\"number\">11</span>);\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#722-725\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"numpy/array/struct.PyArray.html#tymethod.get_mut\" class=\"fn\">get_mut</a>(&amp;self, index: impl <a class=\"trait\" href=\"numpy/convert/trait.NpyIndex.html\" title=\"trait numpy::convert::NpyIndex\">NpyIndex</a>&lt;Dim = D&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Same as <a href=\"numpy/array/struct.PyArray.html#method.get\" title=\"method numpy::array::PyArray::get\"><code>get</code></a>, but returns <code>Option&lt;&amp;mut T&gt;</code>.</p>\n<h5 id=\"safety-5\"><a class=\"doc-anchor\" href=\"#safety-5\">§</a>Safety</h5>\n<p>Calling this method is undefined behaviour if the underlying array\nis aliased immutably or mutably by other instances of <a href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\"><code>PyArray</code></a>\nor concurrently modified by Python or other native code.</p>\n<p>Consider using safe alternatives like <a href=\"numpy/borrow/struct.PyReadwriteArray.html#method.get_mut\" title=\"method numpy::borrow::PyReadwriteArray::get_mut\"><code>PyReadwriteArray::get_mut</code></a>.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>numpy::{PyArray, PyArrayMethods};\n<span class=\"kw\">use </span>pyo3::Python;\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>pyarray = PyArray::arange_bound(py, <span class=\"number\">0</span>, <span class=\"number\">16</span>, <span class=\"number\">1</span>).reshape([<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>]).unwrap();\n\n    <span class=\"kw\">unsafe </span>{\n        <span class=\"kw-2\">*</span>pyarray.get_mut([<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>]).unwrap() = <span class=\"number\">42</span>;\n    }\n\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">*</span>pyarray.get([<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>]).unwrap() }, <span class=\"number\">42</span>);\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.uget\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#753-758\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"numpy/array/struct.PyArray.html#tymethod.uget\" class=\"fn\">uget</a>&lt;Idx&gt;(&amp;self, index: Idx) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;T</a><div class=\"where\">where\n    Idx: <a class=\"trait\" href=\"numpy/convert/trait.NpyIndex.html\" title=\"trait numpy::convert::NpyIndex\">NpyIndex</a>&lt;Dim = D&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Get an immutable reference of the specified element,\nwithout checking the given index.</p>\n<p>See <a href=\"numpy/convert/trait.NpyIndex.html\" title=\"trait numpy::convert::NpyIndex\"><code>NpyIndex</code></a> for what types can be used as the index.</p>\n<h5 id=\"safety-6\"><a class=\"doc-anchor\" href=\"#safety-6\">§</a>Safety</h5>\n<p>Passing an invalid index is undefined behavior.\nThe element must also have been initialized and\nall other references to it is must also be shared.</p>\n<p>See <a href=\"numpy/borrow/struct.PyReadonlyArray.html#method.get\" title=\"method numpy::borrow::PyReadonlyArray::get\"><code>PyReadonlyArray::get</code></a> for a safe alternative.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>numpy::{PyArray, PyArrayMethods};\n<span class=\"kw\">use </span>pyo3::Python;\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>pyarray = PyArray::arange_bound(py, <span class=\"number\">0</span>, <span class=\"number\">16</span>, <span class=\"number\">1</span>).reshape([<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>]).unwrap();\n\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">*</span>pyarray.uget([<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>]) }, <span class=\"number\">11</span>);\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.uget_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#771-776\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"numpy/array/struct.PyArray.html#tymethod.uget_mut\" class=\"fn\">uget_mut</a>&lt;Idx&gt;(&amp;self, index: Idx) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    Idx: <a class=\"trait\" href=\"numpy/convert/trait.NpyIndex.html\" title=\"trait numpy::convert::NpyIndex\">NpyIndex</a>&lt;Dim = D&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Same as <a href=\"numpy/array/struct.PyArray.html#method.uget\" title=\"method numpy::array::PyArray::uget\"><code>uget</code></a>, but returns <code>&amp;mut T</code>.</p>\n<h5 id=\"safety-7\"><a class=\"doc-anchor\" href=\"#safety-7\">§</a>Safety</h5>\n<p>Passing an invalid index is undefined behavior.\nThe element must also have been initialized and\nother references to it must not exist.</p>\n<p>See <a href=\"numpy/borrow/struct.PyReadwriteArray.html#method.get_mut\" title=\"method numpy::borrow::PyReadwriteArray::get_mut\"><code>PyReadwriteArray::get_mut</code></a> for a safe alternative.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.uget_raw\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#784-789\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"numpy/array/struct.PyArray.html#tymethod.uget_raw\" class=\"fn\">uget_raw</a>&lt;Idx&gt;(&amp;self, index: Idx) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.pointer.html\">*mut T</a><div class=\"where\">where\n    Idx: <a class=\"trait\" href=\"numpy/convert/trait.NpyIndex.html\" title=\"trait numpy::convert::NpyIndex\">NpyIndex</a>&lt;Dim = D&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Same as <a href=\"numpy/array/struct.PyArray.html#method.uget\" title=\"method numpy::array::PyArray::uget\"><code>uget</code></a>, but returns <code>*mut T</code>.</p>\n<h5 id=\"safety-8\"><a class=\"doc-anchor\" href=\"#safety-8\">§</a>Safety</h5>\n<p>Passing an invalid index is undefined behavior.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_owned\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#806-811\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.get_owned\" class=\"fn\">get_owned</a>&lt;Idx&gt;(&amp;self, index: Idx) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    Idx: <a class=\"trait\" href=\"numpy/convert/trait.NpyIndex.html\" title=\"trait numpy::convert::NpyIndex\">NpyIndex</a>&lt;Dim = D&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Get a copy of the specified element in the array.</p>\n<p>See <a href=\"numpy/convert/trait.NpyIndex.html\" title=\"trait numpy::convert::NpyIndex\"><code>NpyIndex</code></a> for what types can be used as the index.</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>numpy::{PyArray, PyArrayMethods};\n<span class=\"kw\">use </span>pyo3::Python;\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>pyarray = PyArray::arange_bound(py, <span class=\"number\">0</span>, <span class=\"number\">16</span>, <span class=\"number\">1</span>).reshape([<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>]).unwrap();\n\n    <span class=\"macro\">assert_eq!</span>(pyarray.get_owned([<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>]), <span class=\"prelude-val\">Some</span>(<span class=\"number\">11</span>));\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_dyn\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#814-816\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.to_dyn\" class=\"fn\">to_dyn</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\">PyArray</a>&lt;T, <a class=\"type\" href=\"numpy/type.IxDyn.html\" title=\"type numpy::IxDyn\">IxDyn</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Turn an array with fixed dimensionality into one with dynamic dimensionality.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_vec\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#838-840\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.to_vec\" class=\"fn\">to_vec</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, <a class=\"struct\" href=\"numpy/struct.NotContiguousError.html\" title=\"struct numpy::NotContiguousError\">NotContiguousError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a copy of the internal data of the array as a <a href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a>.</p>\n<p>Fails if the internal array is not contiguous. See also <a href=\"numpy/array/struct.PyArray.html#method.as_slice\" title=\"method numpy::array::PyArray::as_slice\"><code>as_slice</code></a>.</p>\n<h5 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>numpy::{PyArray2, PyArrayMethods};\n<span class=\"kw\">use </span>pyo3::{Python, types::PyAnyMethods};\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>pyarray= py\n        .eval_bound(<span class=\"string\">\"__import__('numpy').array([[0, 1], [2, 3]], dtype='int64')\"</span>, <span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">None</span>)\n        .unwrap()\n        .downcast_into::&lt;PyArray2&lt;i64&gt;&gt;()\n        .unwrap();\n\n    <span class=\"macro\">assert_eq!</span>(pyarray.to_vec().unwrap(), <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_array\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#847-852\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.from_array\" class=\"fn\">from_array</a>&lt;'py, S&gt;(py: Python&lt;'py&gt;, arr: &amp;<a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'py Self</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_traits/trait.Data.html\" title=\"trait ndarray::data_traits::Data\">Data</a>&lt;Elem = T&gt;,</div></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.21.0: will be replaced by PyArray::from_array_bound in the future</span></div></span></summary><div class=\"docblock\"><p>Deprecated form of <a href=\"numpy/array/struct.PyArray.html#method.from_array_bound\" title=\"associated function numpy::array::PyArray::from_array_bound\"><code>PyArray&lt;T, D&gt;::from_array_bound</code></a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_readonly\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#855-857\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.try_readonly\" class=\"fn\">try_readonly</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"numpy/borrow/struct.PyReadonlyArray.html\" title=\"struct numpy::borrow::PyReadonlyArray\">PyReadonlyArray</a>&lt;'_, T, D&gt;, <a class=\"enum\" href=\"numpy/enum.BorrowError.html\" title=\"enum numpy::BorrowError\">BorrowError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Get an immutable borrow of the NumPy array</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.readonly\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#866-868\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.readonly\" class=\"fn\">readonly</a>(&amp;self) -&gt; <a class=\"struct\" href=\"numpy/borrow/struct.PyReadonlyArray.html\" title=\"struct numpy::borrow::PyReadonlyArray\">PyReadonlyArray</a>&lt;'_, T, D&gt;</h4></section></summary><div class=\"docblock\"><p>Get an immutable borrow of the NumPy array</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the allocation backing the array is currently mutably borrowed.</p>\n<p>For a non-panicking variant, use <a href=\"numpy/array/struct.PyArray.html#method.try_readonly\" title=\"method numpy::array::PyArray::try_readonly\"><code>try_readonly</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_readwrite\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#871-873\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.try_readwrite\" class=\"fn\">try_readwrite</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"numpy/borrow/struct.PyReadwriteArray.html\" title=\"struct numpy::borrow::PyReadwriteArray\">PyReadwriteArray</a>&lt;'_, T, D&gt;, <a class=\"enum\" href=\"numpy/enum.BorrowError.html\" title=\"enum numpy::BorrowError\">BorrowError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Get a mutable borrow of the NumPy array</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.readwrite\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#885-887\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.readwrite\" class=\"fn\">readwrite</a>(&amp;self) -&gt; <a class=\"struct\" href=\"numpy/borrow/struct.PyReadwriteArray.html\" title=\"struct numpy::borrow::PyReadwriteArray\">PyReadwriteArray</a>&lt;'_, T, D&gt;</h4></section></summary><div class=\"docblock\"><p>Get a mutable borrow of the NumPy array</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the allocation backing the array is currently borrowed or\nif the array is <a href=\"https://numpy.org/doc/stable/reference/generated/numpy.ndarray.flags.html\">flagged as</a> not writeable.</p>\n<p>For a non-panicking variant, use <a href=\"numpy/array/struct.PyArray.html#method.try_readwrite\" title=\"method numpy::array::PyArray::try_readwrite\"><code>try_readwrite</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_array\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#896-900\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"numpy/array/struct.PyArray.html#tymethod.as_array\" class=\"fn\">as_array</a>(&amp;self) -&gt; <a class=\"type\" href=\"https://docs.rs/ndarray/0.15/ndarray/type.ArrayView.html\" title=\"type ndarray::ArrayView\">ArrayView</a>&lt;'_, T, D&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an <a href=\"https://docs.rs/ndarray/0.15/ndarray/type.ArrayView.html\" title=\"type ndarray::ArrayView\"><code>ArrayView</code></a> of the internal array.</p>\n<p>See also <a href=\"numpy/borrow/struct.PyReadonlyArray.html#method.as_array\" title=\"method numpy::borrow::PyReadonlyArray::as_array\"><code>PyReadonlyArray::as_array</code></a>.</p>\n<h5 id=\"safety-9\"><a class=\"doc-anchor\" href=\"#safety-9\">§</a>Safety</h5>\n<p>Calling this method invalidates all exclusive references to the internal data, e.g. <code>&amp;mut [T]</code> or <code>ArrayViewMut</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_array_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#909-913\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"numpy/array/struct.PyArray.html#tymethod.as_array_mut\" class=\"fn\">as_array_mut</a>(&amp;self) -&gt; <a class=\"type\" href=\"https://docs.rs/ndarray/0.15/ndarray/type.ArrayViewMut.html\" title=\"type ndarray::ArrayViewMut\">ArrayViewMut</a>&lt;'_, T, D&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an <a href=\"https://docs.rs/ndarray/0.15/ndarray/type.ArrayViewMut.html\" title=\"type ndarray::ArrayViewMut\"><code>ArrayViewMut</code></a> of the internal array.</p>\n<p>See also <a href=\"numpy/borrow/struct.PyReadwriteArray.html#method.as_array_mut\" title=\"method numpy::borrow::PyReadwriteArray::as_array_mut\"><code>PyReadwriteArray::as_array_mut</code></a>.</p>\n<h5 id=\"safety-10\"><a class=\"doc-anchor\" href=\"#safety-10\">§</a>Safety</h5>\n<p>Calling this method invalidates all other references to the internal data, e.g. <code>ArrayView</code> or <code>ArrayViewMut</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_raw_array\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#916-918\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.as_raw_array\" class=\"fn\">as_raw_array</a>(&amp;self) -&gt; <a class=\"type\" href=\"https://docs.rs/ndarray/0.15/ndarray/type.RawArrayView.html\" title=\"type ndarray::RawArrayView\">RawArrayView</a>&lt;T, D&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the internal array as <a href=\"https://docs.rs/ndarray/0.15/ndarray/type.RawArrayView.html\" title=\"type ndarray::RawArrayView\"><code>RawArrayView</code></a> enabling element access via raw pointers</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_raw_array_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#921-923\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.as_raw_array_mut\" class=\"fn\">as_raw_array_mut</a>(&amp;self) -&gt; <a class=\"type\" href=\"https://docs.rs/ndarray/0.15/ndarray/type.RawArrayViewMut.html\" title=\"type ndarray::RawArrayViewMut\">RawArrayViewMut</a>&lt;T, D&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the internal array as <a href=\"https://docs.rs/ndarray/0.15/ndarray/type.RawArrayViewMut.html\" title=\"type ndarray::RawArrayViewMut\"><code>RawArrayViewMut</code></a> enabling element access via raw pointers</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_owned_array\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#943-945\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.to_owned_array\" class=\"fn\">to_owned_array</a>(&amp;self) -&gt; <a class=\"type\" href=\"https://docs.rs/ndarray/0.15/ndarray/type.Array.html\" title=\"type ndarray::Array\">Array</a>&lt;T, D&gt;</h4></section></summary><div class=\"docblock\"><p>Get a copy of the array as an <a href=\"https://docs.rs/ndarray/0.15/ndarray/type.Array.html\" title=\"type ndarray::Array\"><code>ndarray::Array</code></a>.</p>\n<h5 id=\"example-5\"><a class=\"doc-anchor\" href=\"#example-5\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>numpy::{PyArray, PyArrayMethods};\n<span class=\"kw\">use </span>ndarray::array;\n<span class=\"kw\">use </span>pyo3::Python;\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>pyarray = PyArray::arange_bound(py, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>).reshape([<span class=\"number\">2</span>, <span class=\"number\">2</span>]).unwrap();\n\n    <span class=\"macro\">assert_eq!</span>(\n        pyarray.to_owned_array(),\n        <span class=\"macro\">array!</span>[[<span class=\"number\">0</span>, <span class=\"number\">1</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>]]\n    )\n});</code></pre></div>\n</div></details></div></details>",0,"numpy::array::PyArray0","numpy::array::PyArray1","numpy::array::PyArray2","numpy::array::PyArray3","numpy::array::PyArray4","numpy::array::PyArray5","numpy::array::PyArray6","numpy::array::PyArrayDyn"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PyArray%3CT,+Dim%3C%5Busize;+0%5D%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#1069-1076\">source</a><a href=\"#impl-PyArray%3CT,+Dim%3C%5Busize;+0%5D%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"numpy/trait.Element.html\" title=\"trait numpy::Element\">Element</a>&gt; <a class=\"struct\" href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\">PyArray</a>&lt;T, <a class=\"type\" href=\"https://docs.rs/ndarray/0.15/ndarray/aliases/type.Ix0.html\" title=\"type ndarray::aliases::Ix0\">Ix0</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.item\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#1073-1075\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.item\" class=\"fn\">item</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Get the single element of a zero-dimensional array.</p>\n<p>See <a href=\"numpy/fn.inner.html\" title=\"fn numpy::inner\"><code>inner</code></a> for an example.</p>\n</div></details></div></details>",0,"numpy::array::PyArray0"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PyArray%3CT,+Dim%3C%5Busize;+1%5D%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#1078-1144\">source</a><a href=\"#impl-PyArray%3CT,+Dim%3C%5Busize;+1%5D%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"numpy/trait.Element.html\" title=\"trait numpy::Element\">Element</a>&gt; <a class=\"struct\" href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\">PyArray</a>&lt;T, <a class=\"type\" href=\"numpy/type.Ix1.html\" title=\"type numpy::Ix1\">Ix1</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_slice_bound\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#1093-1100\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.from_slice_bound\" class=\"fn\">from_slice_bound</a>&lt;'py&gt;(py: Python&lt;'py&gt;, slice: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.slice.html\">[T]</a>) -&gt; Bound&lt;'py, Self&gt;</h4></section></summary><div class=\"docblock\"><p>Construct a one-dimensional array from a <a href=\"https://doc.rust-lang.org/1.81.0/alloc/slice/index.html\" title=\"mod alloc::slice\">slice</a>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>numpy::{PyArray, PyArrayMethods};\n<span class=\"kw\">use </span>pyo3::Python;\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>slice = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n    <span class=\"kw\">let </span>pyarray = PyArray::from_slice_bound(py, slice);\n    <span class=\"macro\">assert_eq!</span>(pyarray.readonly().as_slice().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_vec_bound\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#1117-1119\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.from_vec_bound\" class=\"fn\">from_vec_bound</a>&lt;'py&gt;(py: Python&lt;'py&gt;, vec: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;) -&gt; Bound&lt;'py, Self&gt;</h4></section></summary><div class=\"docblock\"><p>Construct a one-dimensional array from a <a href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec&lt;T&gt;</code></a>.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>numpy::{PyArray, PyArrayMethods};\n<span class=\"kw\">use </span>pyo3::Python;\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n    <span class=\"kw\">let </span>pyarray = PyArray::from_vec_bound(py, vec);\n    <span class=\"macro\">assert_eq!</span>(pyarray.readonly().as_slice().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter_bound\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#1137-1143\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.from_iter_bound\" class=\"fn\">from_iter_bound</a>&lt;I&gt;(py: Python&lt;'_&gt;, iter: I) -&gt; Bound&lt;'_, Self&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Construct a one-dimensional array from an <a href=\"https://doc.rust-lang.org/1.81.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>.</p>\n<p>If no reliable <a href=\"https://doc.rust-lang.org/1.81.0/core/iter/traits/iterator/trait.Iterator.html#method.size_hint\" title=\"method core::iter::traits::iterator::Iterator::size_hint\"><code>size_hint</code></a> is available,\nthis method can allocate memory multiple times, which can hurt performance.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>numpy::{PyArray, PyArrayMethods};\n<span class=\"kw\">use </span>pyo3::Python;\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>pyarray = PyArray::from_iter_bound(py, <span class=\"string\">\"abcde\"</span>.chars().map(u32::from));\n    <span class=\"macro\">assert_eq!</span>(pyarray.readonly().as_slice().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">97</span>, <span class=\"number\">98</span>, <span class=\"number\">99</span>, <span class=\"number\">100</span>, <span class=\"number\">101</span>]);\n});</code></pre></div>\n</div></details></div></details>",0,"numpy::array::PyArray1"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PyArray%3CT,+Dim%3C%5Busize;+1%5D%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#1147-1178\">source</a><a href=\"#impl-PyArray%3CT,+Dim%3C%5Busize;+1%5D%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"numpy/trait.Element.html\" title=\"trait numpy::Element\">Element</a>&gt; <a class=\"struct\" href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\">PyArray</a>&lt;T, <a class=\"type\" href=\"numpy/type.Ix1.html\" title=\"type numpy::Ix1\">Ix1</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_slice\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#1153-1155\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.from_slice\" class=\"fn\">from_slice</a>&lt;'py&gt;(py: Python&lt;'py&gt;, slice: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.slice.html\">[T]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'py Self</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.21.0: will be replaced by <code>PyArray::from_slice_bound</code> in the future</span></div></span></summary><div class=\"docblock\"><p>Deprecated form of <a href=\"numpy/array/struct.PyArray.html#method.from_slice_bound\" title=\"associated function numpy::array::PyArray::from_slice_bound\"><code>PyArray&lt;T, Ix1&gt;::from_slice_bound</code></a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_vec\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#1163-1165\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.from_vec\" class=\"fn\">from_vec</a>&lt;'py&gt;(py: Python&lt;'py&gt;, vec: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'py Self</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.21.0: will be replaced by <code>PyArray::from_vec_bound</code> in the future</span></div></span></summary><div class=\"docblock\"><p>Deprecated form of <a href=\"numpy/array/struct.PyArray.html#method.from_vec_bound\" title=\"associated function numpy::array::PyArray::from_vec_bound\"><code>PyArray&lt;T, Ix1&gt;::from_vec_bound</code></a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#1172-1177\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;'py, I&gt;(py: Python&lt;'py&gt;, iter: I) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'py Self</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.21.0: will be replaced by PyArray::from_iter_bound in the future</span></div></span></summary><div class=\"docblock\"><p>Deprecated form of <a href=\"numpy/array/struct.PyArray.html#method.from_iter_bound\" title=\"associated function numpy::array::PyArray::from_iter_bound\"><code>PyArray&lt;T, Ix1&gt;::from_iter_bound</code></a></p>\n</div></details></div></details>",0,"numpy::array::PyArray1"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PyArray%3CT,+Dim%3C%5Busize;+1%5D%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#1475-1519\">source</a><a href=\"#impl-PyArray%3CT,+Dim%3C%5Busize;+1%5D%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"numpy/trait.Element.html\" title=\"trait numpy::Element\">Element</a> + <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f64.html\">f64</a>&gt;&gt; <a class=\"struct\" href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\">PyArray</a>&lt;T, <a class=\"type\" href=\"numpy/type.Ix1.html\" title=\"type numpy::Ix1\">Ix1</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.arange\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#1482-1484\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.arange\" class=\"fn\">arange</a>&lt;'py&gt;(py: Python&lt;'py&gt;, start: T, stop: T, step: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;Self</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.21.0: will be replaced by PyArray::arange_bound in the future</span></div></span></summary><div class=\"docblock\"><p>Deprecated form of <a href=\"numpy/array/struct.PyArray.html#method.arange_bound\" title=\"associated function numpy::array::PyArray::arange_bound\"><code>PyArray&lt;T, Ix1&gt;::arange_bound</code></a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.arange_bound\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#1507-1518\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.arange_bound\" class=\"fn\">arange_bound</a>&lt;'py&gt;(\n    py: Python&lt;'py&gt;,\n    start: T,\n    stop: T,\n    step: T,\n) -&gt; Bound&lt;'py, Self&gt;</h4></section></summary><div class=\"docblock\"><p>Return evenly spaced values within a given interval.</p>\n<p>See <a href=\"https://numpy.org/doc/stable/reference/generated/numpy.arange.html\">numpy.arange</a> for the Python API and <a href=\"https://numpy.org/doc/stable/reference/c-api/array.html#c.PyArray_Arange\">PyArray_Arange</a> for the C API.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>numpy::{PyArray, PyArrayMethods};\n<span class=\"kw\">use </span>pyo3::Python;\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>pyarray = PyArray::arange_bound(py, <span class=\"number\">2.0</span>, <span class=\"number\">4.0</span>, <span class=\"number\">0.5</span>);\n    <span class=\"macro\">assert_eq!</span>(pyarray.readonly().as_slice().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2.0</span>, <span class=\"number\">2.5</span>, <span class=\"number\">3.0</span>, <span class=\"number\">3.5</span>]);\n\n    <span class=\"kw\">let </span>pyarray = PyArray::arange_bound(py, -<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>);\n    <span class=\"macro\">assert_eq!</span>(pyarray.readonly().as_slice().unwrap(), <span class=\"kw-2\">&amp;</span>[-<span class=\"number\">2</span>, <span class=\"number\">1</span>]);\n});</code></pre></div>\n</div></details></div></details>",0,"numpy::array::PyArray1"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PyArray%3CT,+Dim%3C%5Busize;+2%5D%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#1180-1232\">source</a><a href=\"#impl-PyArray%3CT,+Dim%3C%5Busize;+2%5D%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"numpy/trait.Element.html\" title=\"trait numpy::Element\">Element</a>&gt; <a class=\"struct\" href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\">PyArray</a>&lt;T, <a class=\"type\" href=\"numpy/type.Ix2.html\" title=\"type numpy::Ix2\">Ix2</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_vec2\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#1187-1189\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.from_vec2\" class=\"fn\">from_vec2</a>&lt;'py&gt;(\n    py: Python&lt;'py&gt;,\n    v: &amp;[<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'py Self</a>, <a class=\"struct\" href=\"numpy/struct.FromVecError.html\" title=\"struct numpy::FromVecError\">FromVecError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.21.0: will be replaced by <code>PyArray::from_vec2_bound</code> in the future</span></div></span></summary><div class=\"docblock\"><p>Deprecated form of <a href=\"numpy/array/struct.PyArray.html#method.from_vec2_bound\" title=\"associated function numpy::array::PyArray::from_vec2_bound\"><code>PyArray&lt;T, Ix2&gt;::from_vec2_bound</code></a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_vec2_bound\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#1212-1231\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.from_vec2_bound\" class=\"fn\">from_vec2_bound</a>&lt;'py&gt;(\n    py: Python&lt;'py&gt;,\n    v: &amp;[<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Bound&lt;'py, Self&gt;, <a class=\"struct\" href=\"numpy/struct.FromVecError.html\" title=\"struct numpy::FromVecError\">FromVecError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Construct a two-dimension array from a <a href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec&lt;Vec&lt;T&gt;&gt;</code></a>.</p>\n<p>This function checks all dimensions of the inner vectors and returns\nan error if they are not all equal.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>numpy::{PyArray, PyArrayMethods};\n<span class=\"kw\">use </span>pyo3::Python;\n<span class=\"kw\">use </span>ndarray::array;\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>vec2 = <span class=\"macro\">vec!</span>[<span class=\"macro\">vec!</span>[<span class=\"number\">11</span>, <span class=\"number\">12</span>], <span class=\"macro\">vec!</span>[<span class=\"number\">21</span>, <span class=\"number\">22</span>]];\n    <span class=\"kw\">let </span>pyarray = PyArray::from_vec2_bound(py, <span class=\"kw-2\">&amp;</span>vec2).unwrap();\n    <span class=\"macro\">assert_eq!</span>(pyarray.readonly().as_array(), <span class=\"macro\">array!</span>[[<span class=\"number\">11</span>, <span class=\"number\">12</span>], [<span class=\"number\">21</span>, <span class=\"number\">22</span>]]);\n\n    <span class=\"kw\">let </span>ragged_vec2 = <span class=\"macro\">vec!</span>[<span class=\"macro\">vec!</span>[<span class=\"number\">11</span>, <span class=\"number\">12</span>], <span class=\"macro\">vec!</span>[<span class=\"number\">21</span>]];\n    <span class=\"macro\">assert!</span>(PyArray::from_vec2_bound(py, <span class=\"kw-2\">&amp;</span>ragged_vec2).is_err());\n});</code></pre></div>\n</div></details></div></details>",0,"numpy::array::PyArray2"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PyArray%3CT,+Dim%3C%5Busize;+3%5D%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#1234-1302\">source</a><a href=\"#impl-PyArray%3CT,+Dim%3C%5Busize;+3%5D%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"numpy/trait.Element.html\" title=\"trait numpy::Element\">Element</a>&gt; <a class=\"struct\" href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\">PyArray</a>&lt;T, <a class=\"type\" href=\"numpy/type.Ix3.html\" title=\"type numpy::Ix3\">Ix3</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_vec3\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#1241-1243\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.from_vec3\" class=\"fn\">from_vec3</a>&lt;'py&gt;(\n    py: Python&lt;'py&gt;,\n    v: &amp;[<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'py Self</a>, <a class=\"struct\" href=\"numpy/struct.FromVecError.html\" title=\"struct numpy::FromVecError\">FromVecError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.21.0: will be replaced by <code>PyArray::from_vec3_bound</code> in the future</span></div></span></summary><div class=\"docblock\"><p>Deprecated form of <a href=\"numpy/array/struct.PyArray.html#method.from_vec3_bound\" title=\"associated function numpy::array::PyArray::from_vec3_bound\"><code>PyArray&lt;T, Ix3&gt;::from_vec3_bound</code></a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_vec3_bound\" class=\"method\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#1275-1301\">source</a><h4 class=\"code-header\">pub fn <a href=\"numpy/array/struct.PyArray.html#tymethod.from_vec3_bound\" class=\"fn\">from_vec3_bound</a>&lt;'py&gt;(\n    py: Python&lt;'py&gt;,\n    v: &amp;[<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Bound&lt;'py, Self&gt;, <a class=\"struct\" href=\"numpy/struct.FromVecError.html\" title=\"struct numpy::FromVecError\">FromVecError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Construct a three-dimensional array from a <a href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec&lt;Vec&lt;Vec&lt;T&gt;&gt;&gt;</code></a>.</p>\n<p>This function checks all dimensions of the inner vectors and returns\nan error if they are not all equal.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>numpy::{PyArray, PyArrayMethods};\n<span class=\"kw\">use </span>pyo3::Python;\n<span class=\"kw\">use </span>ndarray::array;\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>vec3 = <span class=\"macro\">vec!</span>[\n        <span class=\"macro\">vec!</span>[<span class=\"macro\">vec!</span>[<span class=\"number\">111</span>, <span class=\"number\">112</span>], <span class=\"macro\">vec!</span>[<span class=\"number\">121</span>, <span class=\"number\">122</span>]],\n        <span class=\"macro\">vec!</span>[<span class=\"macro\">vec!</span>[<span class=\"number\">211</span>, <span class=\"number\">212</span>], <span class=\"macro\">vec!</span>[<span class=\"number\">221</span>, <span class=\"number\">222</span>]],\n    ];\n    <span class=\"kw\">let </span>pyarray = PyArray::from_vec3_bound(py, <span class=\"kw-2\">&amp;</span>vec3).unwrap();\n    <span class=\"macro\">assert_eq!</span>(\n        pyarray.readonly().as_array(),\n        <span class=\"macro\">array!</span>[[[<span class=\"number\">111</span>, <span class=\"number\">112</span>], [<span class=\"number\">121</span>, <span class=\"number\">122</span>]], [[<span class=\"number\">211</span>, <span class=\"number\">212</span>], [<span class=\"number\">221</span>, <span class=\"number\">222</span>]]]\n    );\n\n    <span class=\"kw\">let </span>ragged_vec3 = <span class=\"macro\">vec!</span>[\n        <span class=\"macro\">vec!</span>[<span class=\"macro\">vec!</span>[<span class=\"number\">111</span>, <span class=\"number\">112</span>], <span class=\"macro\">vec!</span>[<span class=\"number\">121</span>, <span class=\"number\">122</span>]],\n        <span class=\"macro\">vec!</span>[<span class=\"macro\">vec!</span>[<span class=\"number\">211</span>], <span class=\"macro\">vec!</span>[<span class=\"number\">221</span>, <span class=\"number\">222</span>]],\n    ];\n    <span class=\"macro\">assert!</span>(PyArray::from_vec3_bound(py, <span class=\"kw-2\">&amp;</span>ragged_vec3).is_err());\n});</code></pre></div>\n</div></details></div></details>",0,"numpy::array::PyArray3"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PyNativeType-for-PyArray%3CT,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#143\">source</a><a href=\"#impl-PyNativeType-for-PyArray%3CT,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, D&gt; PyNativeType for <a class=\"struct\" href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\">PyArray</a>&lt;T, D&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.AsRefSource\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.AsRefSource\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">AsRefSource</a> = <a class=\"struct\" href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\">PyArray</a>&lt;T, D&gt;</h4></section></summary><div class='docblock'>The form of this which is stored inside a <code>Py&lt;T&gt;</code> smart pointer.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_borrowed\" class=\"method trait-impl\"><a href=\"#method.as_borrowed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_borrowed</a>(&amp;self) -&gt; Borrowed&lt;'_, '_, Self::AsRefSource&gt;</h4></section></summary><div class='docblock'>Cast <code>&amp;self</code> to a <code>Borrowed</code> smart pointer. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.py\" class=\"method trait-impl\"><a href=\"#method.py\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">py</a>(&amp;self) -&gt; Python&lt;'_&gt;</h4></section></summary><div class='docblock'>Returns a GIL marker constrained to the lifetime of this type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_downcast\" class=\"method trait-impl\"><a href=\"#method.unchecked_downcast\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">unchecked_downcast</a>(obj: &amp;PyAny) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;Self</a></h4></section></summary><div class='docblock'>Cast <code>&amp;PyAny</code> to <code>&amp;Self</code> without no type checking. <a>Read more</a></div></details></div></details>","PyNativeType","numpy::array::PyArray0","numpy::array::PyArray1","numpy::array::PyArray2","numpy::array::PyArray3","numpy::array::PyArray4","numpy::array::PyArray5","numpy::array::PyArray6","numpy::array::PyArrayDyn"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PyTypeInfo-for-PyArray%3CT,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#130-141\">source</a><a href=\"#impl-PyTypeInfo-for-PyArray%3CT,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"numpy/trait.Element.html\" title=\"trait numpy::Element\">Element</a>, D: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/dimension/dimension_trait/trait.Dimension.html\" title=\"trait ndarray::dimension::dimension_trait::Dimension\">Dimension</a>&gt; PyTypeInfo for <a class=\"struct\" href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\">PyArray</a>&lt;T, D&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.NAME\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#131\">source</a><a href=\"#associatedconstant.NAME\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">NAME</a>: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.str.html\">str</a> = &quot;PyArray&lt;T, D&gt;&quot;</h4></section></summary><div class='docblock'>Class name.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MODULE\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#132\">source</a><a href=\"#associatedconstant.MODULE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">MODULE</a>: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.str.html\">str</a>&gt; = _</h4></section></summary><div class='docblock'>Module name, if any.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_object_raw\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#134-136\">source</a><a href=\"#method.type_object_raw\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">type_object_raw</a>&lt;'py&gt;(py: Python&lt;'py&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.pointer.html\">*mut </a>PyTypeObject</h4></section></summary><div class='docblock'>Returns the PyTypeObject instance for this type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_type_of_bound\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#138-140\">source</a><a href=\"#method.is_type_of_bound\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_type_of_bound</a>(ob: &amp;Bound&lt;'_, PyAny&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Checks if <code>object</code> is an instance of this type or a subclass of this type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_object\" class=\"method trait-impl\"><a href=\"#method.type_object\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">type_object</a>(py: Python&lt;'_&gt;) -&gt; &amp;PyType</h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.21.0: <code>PyTypeInfo::type_object</code> will be replaced by <code>PyTypeInfo::type_object_bound</code> in a future PyO3 version</span></div></span><div class='docblock'>Returns the safe abstraction over the type object.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_object_bound\" class=\"method trait-impl\"><a href=\"#method.type_object_bound\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">type_object_bound</a>(py: Python&lt;'_&gt;) -&gt; Bound&lt;'_, PyType&gt;</h4></section></summary><div class='docblock'>Returns the safe abstraction over the type object.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_type_of\" class=\"method trait-impl\"><a href=\"#method.is_type_of\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_type_of</a>(object: &amp;PyAny) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.21.0: <code>PyTypeInfo::is_type_of</code> will be replaced by <code>PyTypeInfo::is_type_of_bound</code> in a future PyO3 version</span></div></span><div class='docblock'>Checks if <code>object</code> is an instance of this type or a subclass of this type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_exact_type_of\" class=\"method trait-impl\"><a href=\"#method.is_exact_type_of\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_exact_type_of</a>(object: &amp;PyAny) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.21.0: <code>PyTypeInfo::is_exact_type_of</code> will be replaced by <code>PyTypeInfo::is_exact_type_of_bound</code> in a future PyO3 version</span></div></span><div class='docblock'>Checks if <code>object</code> is an instance of this type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_exact_type_of_bound\" class=\"method trait-impl\"><a href=\"#method.is_exact_type_of_bound\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_exact_type_of_bound</a>(object: &amp;Bound&lt;'_, PyAny&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Checks if <code>object</code> is an instance of this type.</div></details></div></details>","PyTypeInfo","numpy::array::PyArray0","numpy::array::PyArray1","numpy::array::PyArray2","numpy::array::PyArray3","numpy::array::PyArray4","numpy::array::PyArray5","numpy::array::PyArray6","numpy::array::PyArrayDyn"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToPyObject-for-PyArray%3CT,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#143\">source</a><a href=\"#impl-ToPyObject-for-PyArray%3CT,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, D&gt; ToPyObject for <a class=\"struct\" href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\">PyArray</a>&lt;T, D&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_object\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#143\">source</a><a href=\"#method.to_object\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_object</a>(&amp;self, py: Python&lt;'_&gt;) -&gt; PyObject</h4></section></summary><div class='docblock'>Converts self into a Python object.</div></details></div></details>","ToPyObject","numpy::array::PyArray0","numpy::array::PyArray1","numpy::array::PyArray2","numpy::array::PyArray3","numpy::array::PyArray4","numpy::array::PyArray5","numpy::array::PyArray6","numpy::array::PyArrayDyn"],["<section id=\"impl-DerefToPyAny-for-PyArray%3CT,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/numpy/array.rs.html#128\">source</a><a href=\"#impl-DerefToPyAny-for-PyArray%3CT,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, D&gt; DerefToPyAny for <a class=\"struct\" href=\"numpy/array/struct.PyArray.html\" title=\"struct numpy::array::PyArray\">PyArray</a>&lt;T, D&gt;</h3></section>","DerefToPyAny","numpy::array::PyArray0","numpy::array::PyArray1","numpy::array::PyArray2","numpy::array::PyArray3","numpy::array::PyArray4","numpy::array::PyArray5","numpy::array::PyArray6","numpy::array::PyArrayDyn"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()